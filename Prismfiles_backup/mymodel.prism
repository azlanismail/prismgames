smg
//=========Player definition=======
player p1
planner,[r0],[r1],[r2],[r3],[r4],[r5],[r6],[r7],[r8],[r9],[r10],[r11],[r12],[r13],[r14],[r15],[r16],[r17],[r18],[r19],[end]
endplayer

player p2
environment,[e0],[e1],[e2]
endplayer

//=========User Requirements=======
const int A0_ID = 0;
const int A0_DUR = 5;	//max duration
const double A0_REL = 0.6; //reliability
const double A0_COST = 10.0; //max cost
const double A0_WG_COST = 0.3; //weight for cost
const double A0_WG_DUR = 0.3; //weight for duration
const double A0_WG_REL = 0.4; //weight for reliability

//=========Resource Profiles=======
const int MAX_SV=20;
const int MAX_EV=3;

const int RS0_ID;
const double RS0_COST;	//cost
const bool RS0_AVAIL;	//availability status
const int RS0_DUR0;	//duration 0;
const int RS0_DUR1;	//duration 1;
const int RS0_DUR2;	//duration 2;
const int RS0_REL0;	//reliability 0;
const int RS0_REL1;	//reliability 1;
const int RS0_REL2;	//reliability 2;

const int RS1_ID;
const double RS1_COST;	//cost
const bool RS1_AVAIL;	//availability status
const int RS1_DUR0;	//duration 0;
const int RS1_DUR1;	//duration 1;
const int RS1_DUR2;	//duration 2;
const int RS1_REL0;	//reliability 0;
const int RS1_REL1;	//reliability 1;
const int RS1_REL2;	//reliability 2;

const int RS2_ID;
const double RS2_COST;	//cost
const bool RS2_AVAIL;	//availability status
const int RS2_DUR0;	//duration 0;
const int RS2_DUR1;	//duration 1;
const int RS2_DUR2;	//duration 2;
const int RS2_REL0;	//reliability 0;
const int RS2_REL1;	//reliability 1;
const int RS2_REL2;	//reliability 2;

const int RS3_ID;
const double RS3_COST;	//cost
const bool RS3_AVAIL;	//availability status
const int RS3_DUR0;	//duration 0;
const int RS3_DUR1;	//duration 1;
const int RS3_DUR2;	//duration 2;
const int RS3_REL0;	//reliability 0;
const int RS3_REL1;	//reliability 1;
const int RS3_REL2;	//reliability 2;

const int RS4_ID;
const double RS4_COST;	//cost
const bool RS4_AVAIL;	//availability status
const int RS4_DUR0;	//duration 0;
const int RS4_DUR1;	//duration 1;
const int RS4_DUR2;	//duration 2;
const int RS4_REL0;	//reliability 0;
const int RS4_REL1;	//reliability 1;
const int RS4_REL2;	//reliability 2;

const int RS5_ID;
const double RS5_COST;	//cost
const bool RS5_AVAIL;	//availability status
const int RS5_DUR0;	//duration 0;
const int RS5_DUR1;	//duration 1;
const int RS5_DUR2;	//duration 2;
const int RS5_REL0;	//reliability 0;
const int RS5_REL1;	//reliability 1;
const int RS5_REL2;	//reliability 2;

const int RS6_ID;
const double RS6_COST;	//cost
const bool RS6_AVAIL;	//availability status
const int RS6_DUR0;	//duration 0;
const int RS6_DUR1;	//duration 1;
const int RS6_DUR2;	//duration 2;
const int RS6_REL0;	//reliability 0;
const int RS6_REL1;	//reliability 1;
const int RS6_REL2;	//reliability 2;

const int RS7_ID;
const double RS7_COST;	//cost
const bool RS7_AVAIL;	//availability status
const int RS7_DUR0;	//duration 0;
const int RS7_DUR1;	//duration 1;
const int RS7_DUR2;	//duration 2;
const int RS7_REL0;	//reliability 0;
const int RS7_REL1;	//reliability 1;
const int RS7_REL2;	//reliability 2;

const int RS8_ID;
const double RS8_COST;	//cost
const bool RS8_AVAIL;	//availability status
const int RS8_DUR0;	//duration 0;
const int RS8_DUR1;	//duration 1;
const int RS8_DUR2;	//duration 2;
const int RS8_REL0;	//reliability 0;
const int RS8_REL1;	//reliability 1;
const int RS8_REL2;	//reliability 2;

const int RS9_ID;
const double RS9_COST;	//cost
const bool RS9_AVAIL;	//availability status
const int RS9_DUR0;	//duration 0;
const int RS9_DUR1;	//duration 1;
const int RS9_DUR2;	//duration 2;
const int RS9_REL0;	//reliability 0;
const int RS9_REL1;	//reliability 1;
const int RS9_REL2;	//reliability 2;

const int RS10_ID;
const double RS10_COST;	//cost
const bool RS10_AVAIL;	//availability status
const int RS10_DUR0;	//duration 0;
const int RS10_DUR1;	//duration 1;
const int RS10_DUR2;	//duration 2;
const int RS10_REL0;	//reliability 0;
const int RS10_REL1;	//reliability 1;
const int RS10_REL2;	//reliability 2;

const int RS11_ID;
const double RS11_COST;	//cost
const bool RS11_AVAIL;	//availability status
const int RS11_DUR0;	//duration 0;
const int RS11_DUR1;	//duration 1;
const int RS11_DUR2;	//duration 2;
const int RS11_REL0;	//reliability 0;
const int RS11_REL1;	//reliability 1;
const int RS11_REL2;	//reliability 2;

const int RS12_ID;
const double RS12_COST;	//cost
const bool RS12_AVAIL;	//availability status
const int RS12_DUR0;	//duration 0;
const int RS12_DUR1;	//duration 1;
const int RS12_DUR2;	//duration 2;
const int RS12_REL0;	//reliability 0;
const int RS12_REL1;	//reliability 1;
const int RS12_REL2;	//reliability 2;

const int RS13_ID;
const double RS13_COST;	//cost
const bool RS13_AVAIL;	//availability status
const int RS13_DUR0;	//duration 0;
const int RS13_DUR1;	//duration 1;
const int RS13_DUR2;	//duration 2;
const int RS13_REL0;	//reliability 0;
const int RS13_REL1;	//reliability 1;
const int RS13_REL2;	//reliability 2;

const int RS14_ID;
const double RS14_COST;	//cost
const bool RS14_AVAIL;	//availability status
const int RS14_DUR0;	//duration 0;
const int RS14_DUR1;	//duration 1;
const int RS14_DUR2;	//duration 2;
const int RS14_REL0;	//reliability 0;
const int RS14_REL1;	//reliability 1;
const int RS14_REL2;	//reliability 2;

const int RS15_ID;
const double RS15_COST;	//cost
const bool RS15_AVAIL;	//availability status
const int RS15_DUR0;	//duration 0;
const int RS15_DUR1;	//duration 1;
const int RS15_DUR2;	//duration 2;
const int RS15_REL0;	//reliability 0;
const int RS15_REL1;	//reliability 1;
const int RS15_REL2;	//reliability 2;

const int RS16_ID;
const double RS16_COST;	//cost
const bool RS16_AVAIL;	//availability status
const int RS16_DUR0;	//duration 0;
const int RS16_DUR1;	//duration 1;
const int RS16_DUR2;	//duration 2;
const int RS16_REL0;	//reliability 0;
const int RS16_REL1;	//reliability 1;
const int RS16_REL2;	//reliability 2;

const int RS17_ID;
const double RS17_COST;	//cost
const bool RS17_AVAIL;	//availability status
const int RS17_DUR0;	//duration 0;
const int RS17_DUR1;	//duration 1;
const int RS17_DUR2;	//duration 2;
const int RS17_REL0;	//reliability 0;
const int RS17_REL1;	//reliability 1;
const int RS17_REL2;	//reliability 2;

const int RS18_ID;
const double RS18_COST;	//cost
const bool RS18_AVAIL;	//availability status
const int RS18_DUR0;	//duration 0;
const int RS18_DUR1;	//duration 1;
const int RS18_DUR2;	//duration 2;
const int RS18_REL0;	//reliability 0;
const int RS18_REL1;	//reliability 1;
const int RS18_REL2;	//reliability 2;

const int RS19_ID;
const double RS19_COST;	//cost
const bool RS19_AVAIL;	//availability status
const int RS19_DUR0;	//duration 0;
const int RS19_DUR1;	//duration 1;
const int RS19_DUR2;	//duration 2;
const int RS19_REL0;	//reliability 0;
const int RS19_REL1;	//reliability 1;
const int RS19_REL2;	//reliability 2;


//=========Global Parameters=======
const int TE=0;
const int TP=1;
global t:[TE..TP] init TP;	//to control the turn
global goal : bool init false;	//to determine the selection
global exec : bool init false;	//to determine the execution
global end : bool init false;	//(absorbing state)

//=========Module for Player 1=======
module planner
sel:[-1..MAX_SV] init -1;
//P1 moves :
[r0] (t=TP) & (goal=false) & (a0_rs0_sat_ml_all=true) -> (goal'=true) & (sel'=0) & (t'=TE);
[r1] (t=TP) & (goal=false) & (a0_rs1_sat_ml_all=true) -> (goal'=true) & (sel'=1) & (t'=TE);
[r2] (t=TP) & (goal=false) & (a0_rs2_sat_ml_all=true) -> (goal'=true) & (sel'=2) & (t'=TE);
[r3] (t=TP) & (goal=false) & (a0_rs3_sat_ml_all=true) -> (goal'=true) & (sel'=3) & (t'=TE);
[r4] (t=TP) & (goal=false) & (a0_rs4_sat_ml_all=true) -> (goal'=true) & (sel'=4) & (t'=TE);
[r5] (t=TP) & (goal=false) & (a0_rs5_sat_ml_all=true) -> (goal'=true) & (sel'=5) & (t'=TE);
[r6] (t=TP) & (goal=false) & (a0_rs6_sat_ml_all=true) -> (goal'=true) & (sel'=6) & (t'=TE);
[r7] (t=TP) & (goal=false) & (a0_rs7_sat_ml_all=true) -> (goal'=true) & (sel'=7) & (t'=TE);
[r8] (t=TP) & (goal=false) & (a0_rs8_sat_ml_all=true) -> (goal'=true) & (sel'=8) & (t'=TE);
[r9] (t=TP) & (goal=false) & (a0_rs9_sat_ml_all=true) -> (goal'=true) & (sel'=9) & (t'=TE);
[r10] (t=TP) & (goal=false) & (a0_rs10_sat_ml_all=true) -> (goal'=true) & (sel'=10) & (t'=TE);
[r11] (t=TP) & (goal=false) & (a0_rs11_sat_ml_all=true) -> (goal'=true) & (sel'=11) & (t'=TE);
[r12] (t=TP) & (goal=false) & (a0_rs12_sat_ml_all=true) -> (goal'=true) & (sel'=12) & (t'=TE);
[r13] (t=TP) & (goal=false) & (a0_rs13_sat_ml_all=true) -> (goal'=true) & (sel'=13) & (t'=TE);
[r14] (t=TP) & (goal=false) & (a0_rs14_sat_ml_all=true) -> (goal'=true) & (sel'=14) & (t'=TE);
[r15] (t=TP) & (goal=false) & (a0_rs15_sat_ml_all=true) -> (goal'=true) & (sel'=15) & (t'=TE);
[r16] (t=TP) & (goal=false) & (a0_rs16_sat_ml_all=true) -> (goal'=true) & (sel'=16) & (t'=TE);
[r17] (t=TP) & (goal=false) & (a0_rs17_sat_ml_all=true) -> (goal'=true) & (sel'=17) & (t'=TE);
[r18] (t=TP) & (goal=false) & (a0_rs18_sat_ml_all=true) -> (goal'=true) & (sel'=18) & (t'=TE);
[r19] (t=TP) & (goal=false) & (a0_rs19_sat_ml_all=true) -> (goal'=true) & (sel'=19) & (t'=TE);
[end] (t=TP) & (end=false) & (goal=true) -> (end'=true) & (t'=TE);
[end] (t=TP) & (end=false) & (exec=true) & (goal=true) -> (end'=true) & (t'=TE);
endmodule

//=========Module for Player 2=======
module environment
ev:[-1..MAX_EV] init -1;
//P2 moves :
[e0] (t=TE) & (exec=false) & (goal=true) -> succ_rs0:(exec'=true) & (ev'=0) & (t'=TP) + 1-succ_rs0:(exec'=false) & (t'=TP);
[e1] (t=TE) & (exec=false) & (goal=true) -> succ_rs1:(exec'=true) & (ev'=1) & (t'=TP) + 1-succ_rs1:(exec'=false) & (t'=TP);
[e2] (t=TE) & (exec=false) & (goal=true) -> succ_rs2:(exec'=true) & (ev'=2) & (t'=TP) + 1-succ_rs2:(exec'=false) & (t'=TP);
endmodule

//=========Assign reliability values=======
formula succ_rs0 = ( sel = 0 ? RS0_REL0 : ( sel = 1 ? RS1_REL0 : ( sel = 2 ? RS2_REL0 : ( sel = 3 ? RS3_REL0 : ( sel = 4 ? RS4_REL0 : ( sel = 5 ? RS5_REL0 : ( sel = 6 ? RS6_REL0 : ( sel = 7 ? RS7_REL0 : ( sel = 8 ? RS8_REL0 : ( sel = 9 ? RS9_REL0 : ( sel = 10 ? RS10_REL0 : ( sel = 11 ? RS11_REL0 : ( sel = 12 ? RS12_REL0 : ( sel = 13 ? RS13_REL0 : ( sel = 14 ? RS14_REL0 : ( sel = 15 ? RS15_REL0 : ( sel = 16 ? RS16_REL0 : ( sel = 17 ? RS17_REL0 : ( sel = 18 ? RS18_REL0 : ( sel = 19 ? RS19_REL0 :0.0))))))))))))))))))));
formula succ_rs1 = ( sel = 0 ? RS0_REL1 : ( sel = 1 ? RS1_REL1 : ( sel = 2 ? RS2_REL1 : ( sel = 3 ? RS3_REL1 : ( sel = 4 ? RS4_REL1 : ( sel = 5 ? RS5_REL1 : ( sel = 6 ? RS6_REL1 : ( sel = 7 ? RS7_REL1 : ( sel = 8 ? RS8_REL1 : ( sel = 9 ? RS9_REL1 : ( sel = 10 ? RS10_REL1 : ( sel = 11 ? RS11_REL1 : ( sel = 12 ? RS12_REL1 : ( sel = 13 ? RS13_REL1 : ( sel = 14 ? RS14_REL1 : ( sel = 15 ? RS15_REL1 : ( sel = 16 ? RS16_REL1 : ( sel = 17 ? RS17_REL1 : ( sel = 18 ? RS18_REL1 : ( sel = 19 ? RS19_REL1 :0.0))))))))))))))))))));
formula succ_rs2 = ( sel = 0 ? RS0_REL2 : ( sel = 1 ? RS1_REL2 : ( sel = 2 ? RS2_REL2 : ( sel = 3 ? RS3_REL2 : ( sel = 4 ? RS4_REL2 : ( sel = 5 ? RS5_REL2 : ( sel = 6 ? RS6_REL2 : ( sel = 7 ? RS7_REL2 : ( sel = 8 ? RS8_REL2 : ( sel = 9 ? RS9_REL2 : ( sel = 10 ? RS10_REL2 : ( sel = 11 ? RS11_REL2 : ( sel = 12 ? RS12_REL2 : ( sel = 13 ? RS13_REL2 : ( sel = 14 ? RS14_REL2 : ( sel = 15 ? RS15_REL2 : ( sel = 16 ? RS16_REL2 : ( sel = 17 ? RS17_REL2 : ( sel = 18 ? RS18_REL2 : ( sel = 19 ? RS19_REL2 :0.0))))))))))))))))))));

//=========QoS Constraints Checking=======
//=====Application 0 and RS0
formula a0_rs0_sat_dur0 = ( (A0_DUR <= RS0_DUR0) ? true:false);
formula a0_rs0_sat_dur1 = ( (A0_DUR <= RS0_DUR1) ? true:false);
formula a0_rs0_sat_dur2 = ( (A0_DUR <= RS0_DUR2) ? true:false);
formula a0_rs0_sat_rel0 = ( (A0_DUR <= RS0_REL0) ? true:false);
formula a0_rs0_sat_rel1 = ( (A0_DUR <= RS0_REL1) ? true:false);
formula a0_rs0_sat_rel2 = ( (A0_DUR <= RS0_REL2) ? true:false);
formula a0_rs0_sat_cost = ( (A0_COST <= RS0_COST) ? true:false);
formula a0_rs0_sat_avail = RS0_AVAIL;
formula a0_rs0_sat_ml_all = a0_rs0_sat_avail;

//=====Application 0 and RS1
formula a0_rs1_sat_dur0 = ( (A0_DUR <= RS1_DUR0) ? true:false);
formula a0_rs1_sat_dur1 = ( (A0_DUR <= RS1_DUR1) ? true:false);
formula a0_rs1_sat_dur2 = ( (A0_DUR <= RS1_DUR2) ? true:false);
formula a0_rs1_sat_rel0 = ( (A0_DUR <= RS1_REL0) ? true:false);
formula a0_rs1_sat_rel1 = ( (A0_DUR <= RS1_REL1) ? true:false);
formula a0_rs1_sat_rel2 = ( (A0_DUR <= RS1_REL2) ? true:false);
formula a0_rs1_sat_cost = ( (A0_COST <= RS1_COST) ? true:false);
formula a0_rs1_sat_avail = RS1_AVAIL;
formula a0_rs1_sat_ml_all = a0_rs1_sat_avail;

//=====Application 0 and RS2
formula a0_rs2_sat_dur0 = ( (A0_DUR <= RS2_DUR0) ? true:false);
formula a0_rs2_sat_dur1 = ( (A0_DUR <= RS2_DUR1) ? true:false);
formula a0_rs2_sat_dur2 = ( (A0_DUR <= RS2_DUR2) ? true:false);
formula a0_rs2_sat_rel0 = ( (A0_DUR <= RS2_REL0) ? true:false);
formula a0_rs2_sat_rel1 = ( (A0_DUR <= RS2_REL1) ? true:false);
formula a0_rs2_sat_rel2 = ( (A0_DUR <= RS2_REL2) ? true:false);
formula a0_rs2_sat_cost = ( (A0_COST <= RS2_COST) ? true:false);
formula a0_rs2_sat_avail = RS2_AVAIL;
formula a0_rs2_sat_ml_all = a0_rs2_sat_avail;

//=====Application 0 and RS3
formula a0_rs3_sat_dur0 = ( (A0_DUR <= RS3_DUR0) ? true:false);
formula a0_rs3_sat_dur1 = ( (A0_DUR <= RS3_DUR1) ? true:false);
formula a0_rs3_sat_dur2 = ( (A0_DUR <= RS3_DUR2) ? true:false);
formula a0_rs3_sat_rel0 = ( (A0_DUR <= RS3_REL0) ? true:false);
formula a0_rs3_sat_rel1 = ( (A0_DUR <= RS3_REL1) ? true:false);
formula a0_rs3_sat_rel2 = ( (A0_DUR <= RS3_REL2) ? true:false);
formula a0_rs3_sat_cost = ( (A0_COST <= RS3_COST) ? true:false);
formula a0_rs3_sat_avail = RS3_AVAIL;
formula a0_rs3_sat_ml_all = a0_rs3_sat_avail;

//=====Application 0 and RS4
formula a0_rs4_sat_dur0 = ( (A0_DUR <= RS4_DUR0) ? true:false);
formula a0_rs4_sat_dur1 = ( (A0_DUR <= RS4_DUR1) ? true:false);
formula a0_rs4_sat_dur2 = ( (A0_DUR <= RS4_DUR2) ? true:false);
formula a0_rs4_sat_rel0 = ( (A0_DUR <= RS4_REL0) ? true:false);
formula a0_rs4_sat_rel1 = ( (A0_DUR <= RS4_REL1) ? true:false);
formula a0_rs4_sat_rel2 = ( (A0_DUR <= RS4_REL2) ? true:false);
formula a0_rs4_sat_cost = ( (A0_COST <= RS4_COST) ? true:false);
formula a0_rs4_sat_avail = RS4_AVAIL;
formula a0_rs4_sat_ml_all = a0_rs4_sat_avail;

//=====Application 0 and RS5
formula a0_rs5_sat_dur0 = ( (A0_DUR <= RS5_DUR0) ? true:false);
formula a0_rs5_sat_dur1 = ( (A0_DUR <= RS5_DUR1) ? true:false);
formula a0_rs5_sat_dur2 = ( (A0_DUR <= RS5_DUR2) ? true:false);
formula a0_rs5_sat_rel0 = ( (A0_DUR <= RS5_REL0) ? true:false);
formula a0_rs5_sat_rel1 = ( (A0_DUR <= RS5_REL1) ? true:false);
formula a0_rs5_sat_rel2 = ( (A0_DUR <= RS5_REL2) ? true:false);
formula a0_rs5_sat_cost = ( (A0_COST <= RS5_COST) ? true:false);
formula a0_rs5_sat_avail = RS5_AVAIL;
formula a0_rs5_sat_ml_all = a0_rs5_sat_avail;

//=====Application 0 and RS6
formula a0_rs6_sat_dur0 = ( (A0_DUR <= RS6_DUR0) ? true:false);
formula a0_rs6_sat_dur1 = ( (A0_DUR <= RS6_DUR1) ? true:false);
formula a0_rs6_sat_dur2 = ( (A0_DUR <= RS6_DUR2) ? true:false);
formula a0_rs6_sat_rel0 = ( (A0_DUR <= RS6_REL0) ? true:false);
formula a0_rs6_sat_rel1 = ( (A0_DUR <= RS6_REL1) ? true:false);
formula a0_rs6_sat_rel2 = ( (A0_DUR <= RS6_REL2) ? true:false);
formula a0_rs6_sat_cost = ( (A0_COST <= RS6_COST) ? true:false);
formula a0_rs6_sat_avail = RS6_AVAIL;
formula a0_rs6_sat_ml_all = a0_rs6_sat_avail;

//=====Application 0 and RS7
formula a0_rs7_sat_dur0 = ( (A0_DUR <= RS7_DUR0) ? true:false);
formula a0_rs7_sat_dur1 = ( (A0_DUR <= RS7_DUR1) ? true:false);
formula a0_rs7_sat_dur2 = ( (A0_DUR <= RS7_DUR2) ? true:false);
formula a0_rs7_sat_rel0 = ( (A0_DUR <= RS7_REL0) ? true:false);
formula a0_rs7_sat_rel1 = ( (A0_DUR <= RS7_REL1) ? true:false);
formula a0_rs7_sat_rel2 = ( (A0_DUR <= RS7_REL2) ? true:false);
formula a0_rs7_sat_cost = ( (A0_COST <= RS7_COST) ? true:false);
formula a0_rs7_sat_avail = RS7_AVAIL;
formula a0_rs7_sat_ml_all = a0_rs7_sat_avail;

//=====Application 0 and RS8
formula a0_rs8_sat_dur0 = ( (A0_DUR <= RS8_DUR0) ? true:false);
formula a0_rs8_sat_dur1 = ( (A0_DUR <= RS8_DUR1) ? true:false);
formula a0_rs8_sat_dur2 = ( (A0_DUR <= RS8_DUR2) ? true:false);
formula a0_rs8_sat_rel0 = ( (A0_DUR <= RS8_REL0) ? true:false);
formula a0_rs8_sat_rel1 = ( (A0_DUR <= RS8_REL1) ? true:false);
formula a0_rs8_sat_rel2 = ( (A0_DUR <= RS8_REL2) ? true:false);
formula a0_rs8_sat_cost = ( (A0_COST <= RS8_COST) ? true:false);
formula a0_rs8_sat_avail = RS8_AVAIL;
formula a0_rs8_sat_ml_all = a0_rs8_sat_avail;

//=====Application 0 and RS9
formula a0_rs9_sat_dur0 = ( (A0_DUR <= RS9_DUR0) ? true:false);
formula a0_rs9_sat_dur1 = ( (A0_DUR <= RS9_DUR1) ? true:false);
formula a0_rs9_sat_dur2 = ( (A0_DUR <= RS9_DUR2) ? true:false);
formula a0_rs9_sat_rel0 = ( (A0_DUR <= RS9_REL0) ? true:false);
formula a0_rs9_sat_rel1 = ( (A0_DUR <= RS9_REL1) ? true:false);
formula a0_rs9_sat_rel2 = ( (A0_DUR <= RS9_REL2) ? true:false);
formula a0_rs9_sat_cost = ( (A0_COST <= RS9_COST) ? true:false);
formula a0_rs9_sat_avail = RS9_AVAIL;
formula a0_rs9_sat_ml_all = a0_rs9_sat_avail;

//=====Application 0 and RS10
formula a0_rs10_sat_dur0 = ( (A0_DUR <= RS10_DUR0) ? true:false);
formula a0_rs10_sat_dur1 = ( (A0_DUR <= RS10_DUR1) ? true:false);
formula a0_rs10_sat_dur2 = ( (A0_DUR <= RS10_DUR2) ? true:false);
formula a0_rs10_sat_rel0 = ( (A0_DUR <= RS10_REL0) ? true:false);
formula a0_rs10_sat_rel1 = ( (A0_DUR <= RS10_REL1) ? true:false);
formula a0_rs10_sat_rel2 = ( (A0_DUR <= RS10_REL2) ? true:false);
formula a0_rs10_sat_cost = ( (A0_COST <= RS10_COST) ? true:false);
formula a0_rs10_sat_avail = RS10_AVAIL;
formula a0_rs10_sat_ml_all = a0_rs10_sat_avail;

//=====Application 0 and RS11
formula a0_rs11_sat_dur0 = ( (A0_DUR <= RS11_DUR0) ? true:false);
formula a0_rs11_sat_dur1 = ( (A0_DUR <= RS11_DUR1) ? true:false);
formula a0_rs11_sat_dur2 = ( (A0_DUR <= RS11_DUR2) ? true:false);
formula a0_rs11_sat_rel0 = ( (A0_DUR <= RS11_REL0) ? true:false);
formula a0_rs11_sat_rel1 = ( (A0_DUR <= RS11_REL1) ? true:false);
formula a0_rs11_sat_rel2 = ( (A0_DUR <= RS11_REL2) ? true:false);
formula a0_rs11_sat_cost = ( (A0_COST <= RS11_COST) ? true:false);
formula a0_rs11_sat_avail = RS11_AVAIL;
formula a0_rs11_sat_ml_all = a0_rs11_sat_avail;

//=====Application 0 and RS12
formula a0_rs12_sat_dur0 = ( (A0_DUR <= RS12_DUR0) ? true:false);
formula a0_rs12_sat_dur1 = ( (A0_DUR <= RS12_DUR1) ? true:false);
formula a0_rs12_sat_dur2 = ( (A0_DUR <= RS12_DUR2) ? true:false);
formula a0_rs12_sat_rel0 = ( (A0_DUR <= RS12_REL0) ? true:false);
formula a0_rs12_sat_rel1 = ( (A0_DUR <= RS12_REL1) ? true:false);
formula a0_rs12_sat_rel2 = ( (A0_DUR <= RS12_REL2) ? true:false);
formula a0_rs12_sat_cost = ( (A0_COST <= RS12_COST) ? true:false);
formula a0_rs12_sat_avail = RS12_AVAIL;
formula a0_rs12_sat_ml_all = a0_rs12_sat_avail;

//=====Application 0 and RS13
formula a0_rs13_sat_dur0 = ( (A0_DUR <= RS13_DUR0) ? true:false);
formula a0_rs13_sat_dur1 = ( (A0_DUR <= RS13_DUR1) ? true:false);
formula a0_rs13_sat_dur2 = ( (A0_DUR <= RS13_DUR2) ? true:false);
formula a0_rs13_sat_rel0 = ( (A0_DUR <= RS13_REL0) ? true:false);
formula a0_rs13_sat_rel1 = ( (A0_DUR <= RS13_REL1) ? true:false);
formula a0_rs13_sat_rel2 = ( (A0_DUR <= RS13_REL2) ? true:false);
formula a0_rs13_sat_cost = ( (A0_COST <= RS13_COST) ? true:false);
formula a0_rs13_sat_avail = RS13_AVAIL;
formula a0_rs13_sat_ml_all = a0_rs13_sat_avail;

//=====Application 0 and RS14
formula a0_rs14_sat_dur0 = ( (A0_DUR <= RS14_DUR0) ? true:false);
formula a0_rs14_sat_dur1 = ( (A0_DUR <= RS14_DUR1) ? true:false);
formula a0_rs14_sat_dur2 = ( (A0_DUR <= RS14_DUR2) ? true:false);
formula a0_rs14_sat_rel0 = ( (A0_DUR <= RS14_REL0) ? true:false);
formula a0_rs14_sat_rel1 = ( (A0_DUR <= RS14_REL1) ? true:false);
formula a0_rs14_sat_rel2 = ( (A0_DUR <= RS14_REL2) ? true:false);
formula a0_rs14_sat_cost = ( (A0_COST <= RS14_COST) ? true:false);
formula a0_rs14_sat_avail = RS14_AVAIL;
formula a0_rs14_sat_ml_all = a0_rs14_sat_avail;

//=====Application 0 and RS15
formula a0_rs15_sat_dur0 = ( (A0_DUR <= RS15_DUR0) ? true:false);
formula a0_rs15_sat_dur1 = ( (A0_DUR <= RS15_DUR1) ? true:false);
formula a0_rs15_sat_dur2 = ( (A0_DUR <= RS15_DUR2) ? true:false);
formula a0_rs15_sat_rel0 = ( (A0_DUR <= RS15_REL0) ? true:false);
formula a0_rs15_sat_rel1 = ( (A0_DUR <= RS15_REL1) ? true:false);
formula a0_rs15_sat_rel2 = ( (A0_DUR <= RS15_REL2) ? true:false);
formula a0_rs15_sat_cost = ( (A0_COST <= RS15_COST) ? true:false);
formula a0_rs15_sat_avail = RS15_AVAIL;
formula a0_rs15_sat_ml_all = a0_rs15_sat_avail;

//=====Application 0 and RS16
formula a0_rs16_sat_dur0 = ( (A0_DUR <= RS16_DUR0) ? true:false);
formula a0_rs16_sat_dur1 = ( (A0_DUR <= RS16_DUR1) ? true:false);
formula a0_rs16_sat_dur2 = ( (A0_DUR <= RS16_DUR2) ? true:false);
formula a0_rs16_sat_rel0 = ( (A0_DUR <= RS16_REL0) ? true:false);
formula a0_rs16_sat_rel1 = ( (A0_DUR <= RS16_REL1) ? true:false);
formula a0_rs16_sat_rel2 = ( (A0_DUR <= RS16_REL2) ? true:false);
formula a0_rs16_sat_cost = ( (A0_COST <= RS16_COST) ? true:false);
formula a0_rs16_sat_avail = RS16_AVAIL;
formula a0_rs16_sat_ml_all = a0_rs16_sat_avail;

//=====Application 0 and RS17
formula a0_rs17_sat_dur0 = ( (A0_DUR <= RS17_DUR0) ? true:false);
formula a0_rs17_sat_dur1 = ( (A0_DUR <= RS17_DUR1) ? true:false);
formula a0_rs17_sat_dur2 = ( (A0_DUR <= RS17_DUR2) ? true:false);
formula a0_rs17_sat_rel0 = ( (A0_DUR <= RS17_REL0) ? true:false);
formula a0_rs17_sat_rel1 = ( (A0_DUR <= RS17_REL1) ? true:false);
formula a0_rs17_sat_rel2 = ( (A0_DUR <= RS17_REL2) ? true:false);
formula a0_rs17_sat_cost = ( (A0_COST <= RS17_COST) ? true:false);
formula a0_rs17_sat_avail = RS17_AVAIL;
formula a0_rs17_sat_ml_all = a0_rs17_sat_avail;

//=====Application 0 and RS18
formula a0_rs18_sat_dur0 = ( (A0_DUR <= RS18_DUR0) ? true:false);
formula a0_rs18_sat_dur1 = ( (A0_DUR <= RS18_DUR1) ? true:false);
formula a0_rs18_sat_dur2 = ( (A0_DUR <= RS18_DUR2) ? true:false);
formula a0_rs18_sat_rel0 = ( (A0_DUR <= RS18_REL0) ? true:false);
formula a0_rs18_sat_rel1 = ( (A0_DUR <= RS18_REL1) ? true:false);
formula a0_rs18_sat_rel2 = ( (A0_DUR <= RS18_REL2) ? true:false);
formula a0_rs18_sat_cost = ( (A0_COST <= RS18_COST) ? true:false);
formula a0_rs18_sat_avail = RS18_AVAIL;
formula a0_rs18_sat_ml_all = a0_rs18_sat_avail;

//=====Application 0 and RS19
formula a0_rs19_sat_dur0 = ( (A0_DUR <= RS19_DUR0) ? true:false);
formula a0_rs19_sat_dur1 = ( (A0_DUR <= RS19_DUR1) ? true:false);
formula a0_rs19_sat_dur2 = ( (A0_DUR <= RS19_DUR2) ? true:false);
formula a0_rs19_sat_rel0 = ( (A0_DUR <= RS19_REL0) ? true:false);
formula a0_rs19_sat_rel1 = ( (A0_DUR <= RS19_REL1) ? true:false);
formula a0_rs19_sat_rel2 = ( (A0_DUR <= RS19_REL2) ? true:false);
formula a0_rs19_sat_cost = ( (A0_COST <= RS19_COST) ? true:false);
formula a0_rs19_sat_avail = RS19_AVAIL;
formula a0_rs19_sat_ml_all = a0_rs19_sat_avail;


//=========Utility-based Decision Making=======
//get the cost of selected node..
formula rs_cost =( sel = 0 ? RS0_COST :( sel = 1 ? RS1_COST :( sel = 2 ? RS2_COST :( sel = 3 ? RS3_COST :( sel = 4 ? RS4_COST :( sel = 5 ? RS5_COST :( sel = 6 ? RS6_COST :( sel = 7 ? RS7_COST :( sel = 8 ? RS8_COST :( sel = 9 ? RS9_COST :( sel = 10 ? RS10_COST :( sel = 11 ? RS11_COST :( sel = 12 ? RS12_COST :( sel = 13 ? RS13_COST :( sel = 14 ? RS14_COST :( sel = 15 ? RS15_COST :( sel = 16 ? RS16_COST :( sel = 17 ? RS17_COST :( sel = 18 ? RS18_COST :( sel = 19 ? RS19_COST :0.0))))))))))))))))))));
//Computing the utility value..
formula mx_cost = max(RS0_COST,RS1_COST,RS2_COST,RS3_COST,RS4_COST,RS5_COST,RS6_COST,RS7_COST,RS8_COST,RS9_COST,RS10_COST,RS11_COST,RS12_COST,RS13_COST,RS14_COST,RS15_COST,RS16_COST,RS17_COST,RS18_COST,RS19_COST);
formula mn_cost = min(RS0_COST,RS1_COST,RS2_COST,RS3_COST,RS4_COST,RS5_COST,RS6_COST,RS7_COST,RS8_COST,RS9_COST,RS10_COST,RS11_COST,RS12_COST,RS13_COST,RS14_COST,RS15_COST,RS16_COST,RS17_COST,RS18_COST,RS19_COST);
formula uv_cost = (mx_cost - rs_cost) / (mx_cost - mn_cost);

//get the duration 0 of selected node..
formula rs_dur0=( (sel = 0 & ev = 0) ? RS0_DUR0 :( (sel = 1 & ev = 0) ? RS1_DUR0 :( (sel = 2 & ev = 0) ? RS2_DUR0 :( (sel = 3 & ev = 0) ? RS3_DUR0 :( (sel = 4 & ev = 0) ? RS4_DUR0 :( (sel = 5 & ev = 0) ? RS5_DUR0 :( (sel = 6 & ev = 0) ? RS6_DUR0 :( (sel = 7 & ev = 0) ? RS7_DUR0 :( (sel = 8 & ev = 0) ? RS8_DUR0 :( (sel = 9 & ev = 0) ? RS9_DUR0 :( (sel = 10 & ev = 0) ? RS10_DUR0 :( (sel = 11 & ev = 0) ? RS11_DUR0 :( (sel = 12 & ev = 0) ? RS12_DUR0 :( (sel = 13 & ev = 0) ? RS13_DUR0 :( (sel = 14 & ev = 0) ? RS14_DUR0 :( (sel = 15 & ev = 0) ? RS15_DUR0 :( (sel = 16 & ev = 0) ? RS16_DUR0 :( (sel = 17 & ev = 0) ? RS17_DUR0 :( (sel = 18 & ev = 0) ? RS18_DUR0 :( (sel = 19 & ev = 0) ? RS19_DUR0 :0.0))))))))))))))))))));
//Computing the utility value..
formula mx_dur0 = max(RS0_DUR0,RS1_DUR0,RS2_DUR0,RS3_DUR0,RS4_DUR0,RS5_DUR0,RS6_DUR0,RS7_DUR0,RS8_DUR0,RS9_DUR0,RS10_DUR0,RS11_DUR0,RS12_DUR0,RS13_DUR0,RS14_DUR0,RS15_DUR0,RS16_DUR0,RS17_DUR0,RS18_DUR0,RS19_DUR0);
formula mn_dur0 = min(RS0_DUR0,RS1_DUR0,RS2_DUR0,RS3_DUR0,RS4_DUR0,RS5_DUR0,RS6_DUR0,RS7_DUR0,RS8_DUR0,RS9_DUR0,RS10_DUR0,RS11_DUR0,RS12_DUR0,RS13_DUR0,RS14_DUR0,RS15_DUR0,RS16_DUR0,RS17_DUR0,RS18_DUR0,RS19_DUR0);
formula uv_dur0 = (mx_dur0 - rs_dur0) / (mx_dur0 - mn_dur0);

//get the duration 1 of selected node..
formula rs_dur1=( (sel = 0 & ev = 1) ? RS0_DUR1 :( (sel = 1 & ev = 1) ? RS1_DUR1 :( (sel = 2 & ev = 1) ? RS2_DUR1 :( (sel = 3 & ev = 1) ? RS3_DUR1 :( (sel = 4 & ev = 1) ? RS4_DUR1 :( (sel = 5 & ev = 1) ? RS5_DUR1 :( (sel = 6 & ev = 1) ? RS6_DUR1 :( (sel = 7 & ev = 1) ? RS7_DUR1 :( (sel = 8 & ev = 1) ? RS8_DUR1 :( (sel = 9 & ev = 1) ? RS9_DUR1 :( (sel = 10 & ev = 1) ? RS10_DUR1 :( (sel = 11 & ev = 1) ? RS11_DUR1 :( (sel = 12 & ev = 1) ? RS12_DUR1 :( (sel = 13 & ev = 1) ? RS13_DUR1 :( (sel = 14 & ev = 1) ? RS14_DUR1 :( (sel = 15 & ev = 1) ? RS15_DUR1 :( (sel = 16 & ev = 1) ? RS16_DUR1 :( (sel = 17 & ev = 1) ? RS17_DUR1 :( (sel = 18 & ev = 1) ? RS18_DUR1 :( (sel = 19 & ev = 1) ? RS19_DUR1 :0.0))))))))))))))))))));
//Computing the utility value..
formula mx_dur1 = max(RS0_DUR1,RS1_DUR1,RS2_DUR1,RS3_DUR1,RS4_DUR1,RS5_DUR1,RS6_DUR1,RS7_DUR1,RS8_DUR1,RS9_DUR1,RS10_DUR1,RS11_DUR1,RS12_DUR1,RS13_DUR1,RS14_DUR1,RS15_DUR1,RS16_DUR1,RS17_DUR1,RS18_DUR1,RS19_DUR1);
formula mn_dur1 = min(RS0_DUR1,RS1_DUR1,RS2_DUR1,RS3_DUR1,RS4_DUR1,RS5_DUR1,RS6_DUR1,RS7_DUR1,RS8_DUR1,RS9_DUR1,RS10_DUR1,RS11_DUR1,RS12_DUR1,RS13_DUR1,RS14_DUR1,RS15_DUR1,RS16_DUR1,RS17_DUR1,RS18_DUR1,RS19_DUR1);
formula uv_dur1 = (mx_dur1 - rs_dur1) / (mx_dur1 - mn_dur1);

//get the duration 2 of selected node..
formula rs_dur2=( (sel = 0 & ev = 2) ? RS0_DUR2 :( (sel = 1 & ev = 2) ? RS1_DUR2 :( (sel = 2 & ev = 2) ? RS2_DUR2 :( (sel = 3 & ev = 2) ? RS3_DUR2 :( (sel = 4 & ev = 2) ? RS4_DUR2 :( (sel = 5 & ev = 2) ? RS5_DUR2 :( (sel = 6 & ev = 2) ? RS6_DUR2 :( (sel = 7 & ev = 2) ? RS7_DUR2 :( (sel = 8 & ev = 2) ? RS8_DUR2 :( (sel = 9 & ev = 2) ? RS9_DUR2 :( (sel = 10 & ev = 2) ? RS10_DUR2 :( (sel = 11 & ev = 2) ? RS11_DUR2 :( (sel = 12 & ev = 2) ? RS12_DUR2 :( (sel = 13 & ev = 2) ? RS13_DUR2 :( (sel = 14 & ev = 2) ? RS14_DUR2 :( (sel = 15 & ev = 2) ? RS15_DUR2 :( (sel = 16 & ev = 2) ? RS16_DUR2 :( (sel = 17 & ev = 2) ? RS17_DUR2 :( (sel = 18 & ev = 2) ? RS18_DUR2 :( (sel = 19 & ev = 2) ? RS19_DUR2 :0.0))))))))))))))))))));
//Computing the utility value..
formula mx_dur2 = max(RS0_DUR2,RS1_DUR2,RS2_DUR2,RS3_DUR2,RS4_DUR2,RS5_DUR2,RS6_DUR2,RS7_DUR2,RS8_DUR2,RS9_DUR2,RS10_DUR2,RS11_DUR2,RS12_DUR2,RS13_DUR2,RS14_DUR2,RS15_DUR2,RS16_DUR2,RS17_DUR2,RS18_DUR2,RS19_DUR2);
formula mn_dur2 = min(RS0_DUR2,RS1_DUR2,RS2_DUR2,RS3_DUR2,RS4_DUR2,RS5_DUR2,RS6_DUR2,RS7_DUR2,RS8_DUR2,RS9_DUR2,RS10_DUR2,RS11_DUR2,RS12_DUR2,RS13_DUR2,RS14_DUR2,RS15_DUR2,RS16_DUR2,RS17_DUR2,RS18_DUR2,RS19_DUR2);
formula uv_dur2 = (mx_dur2 - rs_dur2) / (mx_dur2 - mn_dur2);

//get the reliability 0 of selected node..
formula rs_rel0=( (sel = 0 & ev = 0) ? RS0_REL0 :( (sel = 1 & ev = 0) ? RS1_REL0 :( (sel = 2 & ev = 0) ? RS2_REL0 :( (sel = 3 & ev = 0) ? RS3_REL0 :( (sel = 4 & ev = 0) ? RS4_REL0 :( (sel = 5 & ev = 0) ? RS5_REL0 :( (sel = 6 & ev = 0) ? RS6_REL0 :( (sel = 7 & ev = 0) ? RS7_REL0 :( (sel = 8 & ev = 0) ? RS8_REL0 :( (sel = 9 & ev = 0) ? RS9_REL0 :( (sel = 10 & ev = 0) ? RS10_REL0 :( (sel = 11 & ev = 0) ? RS11_REL0 :( (sel = 12 & ev = 0) ? RS12_REL0 :( (sel = 13 & ev = 0) ? RS13_REL0 :( (sel = 14 & ev = 0) ? RS14_REL0 :( (sel = 15 & ev = 0) ? RS15_REL0 :( (sel = 16 & ev = 0) ? RS16_REL0 :( (sel = 17 & ev = 0) ? RS17_REL0 :( (sel = 18 & ev = 0) ? RS18_REL0 :( (sel = 19 & ev = 0) ? RS19_REL0 :0.0))))))))))))))))))));
//Computing the utility value..
formula mx_rel0 = max(RS0_REL0,RS1_REL0,RS2_REL0,RS3_REL0,RS4_REL0,RS5_REL0,RS6_REL0,RS7_REL0,RS8_REL0,RS9_REL0,RS10_REL0,RS11_REL0,RS12_REL0,RS13_REL0,RS14_REL0,RS15_REL0,RS16_REL0,RS17_REL0,RS18_REL0,RS19_REL0);
formula mn_rel0 = min(RS0_REL0,RS1_REL0,RS2_REL0,RS3_REL0,RS4_REL0,RS5_REL0,RS6_REL0,RS7_REL0,RS8_REL0,RS9_REL0,RS10_REL0,RS11_REL0,RS12_REL0,RS13_REL0,RS14_REL0,RS15_REL0,RS16_REL0,RS17_REL0,RS18_REL0,RS19_REL0);
formula uv_rel0 = (mx_rel0 - rs_rel0) / (mx_rel0 - mn_rel0);

//get the reliability 1 of selected node..
formula rs_rel1=( (sel = 0 & ev = 1) ? RS0_REL1 :( (sel = 1 & ev = 1) ? RS1_REL1 :( (sel = 2 & ev = 1) ? RS2_REL1 :( (sel = 3 & ev = 1) ? RS3_REL1 :( (sel = 4 & ev = 1) ? RS4_REL1 :( (sel = 5 & ev = 1) ? RS5_REL1 :( (sel = 6 & ev = 1) ? RS6_REL1 :( (sel = 7 & ev = 1) ? RS7_REL1 :( (sel = 8 & ev = 1) ? RS8_REL1 :( (sel = 9 & ev = 1) ? RS9_REL1 :( (sel = 10 & ev = 1) ? RS10_REL1 :( (sel = 11 & ev = 1) ? RS11_REL1 :( (sel = 12 & ev = 1) ? RS12_REL1 :( (sel = 13 & ev = 1) ? RS13_REL1 :( (sel = 14 & ev = 1) ? RS14_REL1 :( (sel = 15 & ev = 1) ? RS15_REL1 :( (sel = 16 & ev = 1) ? RS16_REL1 :( (sel = 17 & ev = 1) ? RS17_REL1 :( (sel = 18 & ev = 1) ? RS18_REL1 :( (sel = 19 & ev = 1) ? RS19_REL1 :0.0))))))))))))))))))));
//Computing the utility value..
formula mx_rel1 = max(RS0_REL1,RS1_REL1,RS2_REL1,RS3_REL1,RS4_REL1,RS5_REL1,RS6_REL1,RS7_REL1,RS8_REL1,RS9_REL1,RS10_REL1,RS11_REL1,RS12_REL1,RS13_REL1,RS14_REL1,RS15_REL1,RS16_REL1,RS17_REL1,RS18_REL1,RS19_REL1);
formula mn_rel1 = min(RS0_REL1,RS1_REL1,RS2_REL1,RS3_REL1,RS4_REL1,RS5_REL1,RS6_REL1,RS7_REL1,RS8_REL1,RS9_REL1,RS10_REL1,RS11_REL1,RS12_REL1,RS13_REL1,RS14_REL1,RS15_REL1,RS16_REL1,RS17_REL1,RS18_REL1,RS19_REL1);
formula uv_rel1 = (mx_rel1 - rs_rel1) / (mx_rel1 - mn_rel1);

//get the reliability 2 of selected node..
formula rs_rel2=( (sel = 0 & ev = 2) ? RS0_REL2 :( (sel = 1 & ev = 2) ? RS1_REL2 :( (sel = 2 & ev = 2) ? RS2_REL2 :( (sel = 3 & ev = 2) ? RS3_REL2 :( (sel = 4 & ev = 2) ? RS4_REL2 :( (sel = 5 & ev = 2) ? RS5_REL2 :( (sel = 6 & ev = 2) ? RS6_REL2 :( (sel = 7 & ev = 2) ? RS7_REL2 :( (sel = 8 & ev = 2) ? RS8_REL2 :( (sel = 9 & ev = 2) ? RS9_REL2 :( (sel = 10 & ev = 2) ? RS10_REL2 :( (sel = 11 & ev = 2) ? RS11_REL2 :( (sel = 12 & ev = 2) ? RS12_REL2 :( (sel = 13 & ev = 2) ? RS13_REL2 :( (sel = 14 & ev = 2) ? RS14_REL2 :( (sel = 15 & ev = 2) ? RS15_REL2 :( (sel = 16 & ev = 2) ? RS16_REL2 :( (sel = 17 & ev = 2) ? RS17_REL2 :( (sel = 18 & ev = 2) ? RS18_REL2 :( (sel = 19 & ev = 2) ? RS19_REL2 :0.0))))))))))))))))))));
//Computing the utility value..
formula mx_rel2 = max(RS0_REL2,RS1_REL2,RS2_REL2,RS3_REL2,RS4_REL2,RS5_REL2,RS6_REL2,RS7_REL2,RS8_REL2,RS9_REL2,RS10_REL2,RS11_REL2,RS12_REL2,RS13_REL2,RS14_REL2,RS15_REL2,RS16_REL2,RS17_REL2,RS18_REL2,RS19_REL2);
formula mn_rel2 = min(RS0_REL2,RS1_REL2,RS2_REL2,RS3_REL2,RS4_REL2,RS5_REL2,RS6_REL2,RS7_REL2,RS8_REL2,RS9_REL2,RS10_REL2,RS11_REL2,RS12_REL2,RS13_REL2,RS14_REL2,RS15_REL2,RS16_REL2,RS17_REL2,RS18_REL2,RS19_REL2);
formula uv_rel2 = (mx_rel2 - rs_rel2) / (mx_rel2 - mn_rel2);


//Preventing from non-evaluated problem..
formula v_cost = (uv_cost > 0.0 ? uv_cost: 0.0);
formula v_dur0 = (uv_dur0 > 0.0 ? uv_dur0: 0.0);
formula v_dur1 = (uv_dur1 > 0.0 ? uv_dur1: 0.0);
formula v_dur2 = (uv_dur2 > 0.0 ? uv_dur2: 0.0);
formula v_rel0 = (uv_rel0 > 0.0 ? uv_rel0: 0.0);
formula v_rel1 = (uv_rel1 > 0.0 ? uv_rel1: 0.0);
formula v_rel2 = (uv_rel2 > 0.0 ? uv_rel2: 0.0);

//Compute the overall utility value..
formula uv_all = (ev=0 ? (uv_cost * A0_WG_COST + uv_dur0 * A0_WG_DUR + uv_rel0 * A0_WG_REL):(ev=1 ? (uv_cost * A0_WG_COST + uv_dur1 * A0_WG_DUR + uv_rel1 * A0_WG_REL):(ev=2 ? (uv_cost * A0_WG_COST + uv_dur2 * A0_WG_DUR + uv_rel2 * A0_WG_REL):0.0)));

//=========Reward Structure=======
rewards "cost"
[end] true: rs_cost;
endrewards
rewards "time"
[end] true: rs_dur0;
[end] true: rs_dur1;
[end] true: rs_dur2;
endrewards
rewards "reliability"
[end] true: rs_rel0;
[end] true: rs_rel1;
[end] true: rs_rel2;
endrewards
rewards "utility"
[end] true: uv_all;
[end] true: uv_all;
[end] true: uv_all;
endrewards

//=========Labels=======
label "done" = (end=true);
