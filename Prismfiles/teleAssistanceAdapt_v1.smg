// optimal planning for self-adaptation
// by Azlan Ismail
  

smg

// player for the controller
player con 
controller, [MedicalService1], [MedicalService2], [MedicalService3],[MedicalService4], [MedicalService5],
[AlarmService1], [AlarmService2], [AlarmService3], [DrugService1], [DrugService2], [Retry]
endplayer

//player for the environment
player env 
environment 
endplayer


//======================================================================
//inputs from the adaptation engine:

//inputs for goal
const int GOAL_TY;
const int GOAL_TY_CS = 0;
const int GOAL_TY_FR = 1;
const int GOAL_TY_RT = 2;
const double MAX_CS = 20; 
const double MAX_FR = 0.7;
const int MAX_RT = 26 + MAX_TOTAL_DELAY;	//maximum response time - to limit the goal
const int INIT_RT= 0; 	//initial response time

//inputs from the probing:
const int CUR_PROBE; //-1 for initial service selection
const int SV_SELECT = -1;
const int SV_TIMEOUT = 0;
const int SV_NOTFOUND = 1;
const int SV_TY;  //0-medical service, 1-alarm service, 2-drug service
const int SV_FAIL_ID; //set to -1 for initial service selection
const MAX_SV = 10; //overall service info

//alarm service info - id
const int SV_ALARM1_ID = 1;
const int SV_ALARM2_ID = 2;
const int SV_ALARM3_ID = 3;

//alarm service info - response time
const int SV_ALARM1_RT = 11; 
const int SV_ALARM2_RT = 9;
const int SV_ALARM3_RT = 3;

//alarm service info - cost
const double SV_ALARM1_CS = 4.1; 
const double SV_ALARM2_CS = 2.5;
const double SV_ALARM3_CS = 6.8;

//alarm service info - success rate
const double SV_ALARM1_FR = 0.11; 
const double SV_ALARM2_FR = 0.04;
const double SV_ALARM3_FR = 0.18;

//medical service info - id
const int SV_MEDIC1_ID = 4; 
const int SV_MEDIC2_ID = 5;
const int SV_MEDIC3_ID = 6;
const int SV_MEDIC4_ID = 7;
const int SV_MEDIC5_ID = 8;

//medical service info - response time
const int SV_MEDIC1_RT = 22; 
const int SV_MEDIC2_RT = 27;
const int SV_MEDIC3_RT = 31;
const int SV_MEDIC4_RT = 29;
const int SV_MEDIC5_RT = 20;

//medical service info - cost
const double SV_MEDIC1_CS = 9.8; 
const double SV_MEDIC2_CS = 8.9;
const double SV_MEDIC3_CS = 9.3;
const double SV_MEDIC4_CS = 7.3;
const double SV_MEDIC5_CS = 11.9;

//medical service info - success rate
const double SV_MEDIC1_FR = 0.12; 
const double SV_MEDIC2_FR = 0.07;
const double SV_MEDIC3_FR = 0.18;
const double SV_MEDIC4_FR = 0.25;
const double SV_MEDIC5_FR = 0.05;

//drug service info
const int    SV_DRUG1_ID = 9;
const int    SV_DRUG1_RT = 1;
const double SV_DRUG1_CS = 0.1;
const double SV_DRUG1_FR = 0.01;
const int    SV_DRUG1_OP = 1;

const int    SV_DRUG2_ID = 10;
const int    SV_DRUG2_RT = 1;
const double SV_DRUG2_CS = 0.1;
const double SV_DRUG2_FR = 0.01;
const int    SV_DRUG2_OP = 2;

//composite service
const int CSV_ID = 10; 

//======================================================
//to control the turn
const TE=0;
const TP=1;
global t:[TE..TP] init TE;

//to constraint the selection
global goal : bool init false;	//requirement

//to terminate the adaptation
global end : bool init false;	//(absorbing state)

//======================================================
// player controller

module controller
	//-1 - means initial selection
	//0 - means service timeout (i.e failure or delay)
	//1 - service not found
       // probe:[-1..1] init CUR_PROBE;
	sel_sv:[-1..MAX_SV] init -1;
	
	//for retry
	[Retry] (t=TP) & (goal=false) & (CUR_PROBE>=SV_TIMEOUT) & (SV_FAIL_ID > -1) -> (sel_sv'=SV_FAIL_ID) & (goal'=sat) & (t'=TE);
       // [Retry] (t=TP) & (goal=false) & (CUR_PROBE>=SV_TIMEOUT) & (SV_TY=0) -> (sel_sv'=SV_FAIL_ID) & (goal'=sat) & (t'=TE);
       // [Retry] (t=TP) & (goal=false) & (CUR_PROBE>=SV_TIMEOUT) & (SV_TY=0) -> (sel_sv'=SV_FAIL_ID) & (goal'=sat) & (t'=TE);

	//for medical service
	[MedicalService1] (t=TP) & (goal=false) & (CUR_PROBE>=SV_SELECT) & (SV_TY=0) & (SV_FAIL_ID != SV_MEDIC1_ID) -> (sel_sv'=SV_MEDIC1_ID) & (goal'=sat) & (t'=TE);
        [MedicalService2] (t=TP) & (goal=false) & (CUR_PROBE>=SV_SELECT) & (SV_TY=0) & (SV_FAIL_ID != SV_MEDIC2_ID) -> (sel_sv'=SV_MEDIC2_ID) & (goal'=sat) & (t'=TE);
	[MedicalService3] (t=TP) & (goal=false) & (CUR_PROBE>=SV_SELECT) & (SV_TY=0) & (SV_FAIL_ID != SV_MEDIC3_ID) -> (sel_sv'=SV_MEDIC3_ID) & (goal'=sat) & (t'=TE);
	[MedicalService4] (t=TP) & (goal=false) & (CUR_PROBE>=SV_SELECT) & (SV_TY=0) & (SV_FAIL_ID != SV_MEDIC4_ID) -> (sel_sv'=SV_MEDIC4_ID) & (goal'=sat) & (t'=TE);
	[MedicalService5] (t=TP) & (goal=false) & (CUR_PROBE>=SV_SELECT) & (SV_TY=0) & (SV_FAIL_ID != SV_MEDIC5_ID) -> (sel_sv'=SV_MEDIC5_ID) & (goal'=sat) & (t'=TE);

	//for alarm service
	[AlarmService1] (t=TP) & (goal=false) & (CUR_PROBE>=SV_SELECT) & (SV_TY=1) & (SV_FAIL_ID != SV_ALARM1_ID) -> (sel_sv'=SV_ALARM1_ID) & (goal'=sat) & (t'=TE);
	[AlarmService2] (t=TP) & (goal=false) & (CUR_PROBE>=SV_SELECT) & (SV_TY=1) & (SV_FAIL_ID != SV_ALARM2_ID) -> (sel_sv'=SV_ALARM2_ID) & (goal'=sat) & (t'=TE);
	[AlarmService3] (t=TP) & (goal=false) & (CUR_PROBE>=SV_SELECT) & (SV_TY=1) & (SV_FAIL_ID != SV_ALARM3_ID) -> (sel_sv'=SV_ALARM3_ID) & (goal'=sat) & (t'=TE);

        //for drug service
	[DrugService1] (t=TP) & (goal=false) & (CUR_PROBE>=SV_SELECT) & (SV_TY=2) & (SV_FAIL_ID != SV_DRUG1_ID) -> (sel_sv'=SV_DRUG1_ID) & (goal'=sat) & (t'=TE);
        [DrugService2] (t=TP) & (goal=false) & (CUR_PROBE>=SV_SELECT) & (SV_TY=2) & (SV_FAIL_ID != SV_DRUG2_ID) -> (sel_sv'=SV_DRUG2_ID) & (goal'=sat) & (t'=TE);

	//terminate
	[] (t=TP) & (goal=true) & (end=false) -> (end'=true);
endmodule

//====================================================
//player environment
const MIN_DELAY = 0;
const MAX_DELAY = 3;
const CUR_DELAY = 0;
const MAX_TOTAL_DELAY = 10;


module environment
	rt_delay:[MIN_DELAY..MAX_DELAY] init MIN_DELAY;
	rt_delay_total:[0..MAX_TOTAL_DELAY] init 0;
	
	//update the network latency
	[] (t=TE) & (end=false) & (CUR_DELAY + rt_delay_total < MAX_TOTAL_DELAY) -> 
		 (rt_delay'=CUR_DELAY)&(rt_delay_total'= rt_delay_total + CUR_DELAY) & (t'=TP);
endmodule

//=============================================
//defining the formulas

//to compute the overall cost 
formula sv_cs = ( sel_sv = SV_ALARM1_ID ? SV_ALARM1_CS :
		( sel_sv = SV_ALARM2_ID ? SV_ALARM2_CS :
		( sel_sv = SV_ALARM3_ID ? SV_ALARM3_CS :
		( sel_sv = SV_MEDIC1_ID ? SV_MEDIC1_CS :
		( sel_sv = SV_MEDIC2_ID ? SV_MEDIC2_CS :
		( sel_sv = SV_MEDIC3_ID ? SV_MEDIC3_CS :
		( sel_sv = SV_MEDIC4_ID ? SV_MEDIC4_CS :
                ( sel_sv = SV_MEDIC5_ID ? SV_MEDIC5_CS : 
		( sel_sv = SV_DRUG1_ID ? SV_DRUG1_CS : 
		( sel_sv = SV_DRUG2_ID ? SV_DRUG2_CS : 0 ))))))))));

//to compute the overall service execution time 
formula sv_rt = ( sel_sv = SV_ALARM1_ID ? SV_ALARM1_RT + rt_delay :
		( sel_sv = SV_ALARM2_ID ? SV_ALARM2_RT + rt_delay :
		( sel_sv = SV_ALARM3_ID ? SV_ALARM3_RT + rt_delay :
		( sel_sv = SV_MEDIC1_ID ? SV_MEDIC1_RT + rt_delay :
		( sel_sv = SV_MEDIC2_ID ? SV_MEDIC2_RT + rt_delay :
		( sel_sv = SV_MEDIC3_ID ? SV_MEDIC3_RT + rt_delay :
		( sel_sv = SV_MEDIC4_ID ? SV_MEDIC4_RT + rt_delay :
		( sel_sv = SV_MEDIC5_ID ? SV_MEDIC5_RT + rt_delay :
		( sel_sv = SV_DRUG1_ID ? SV_DRUG1_RT + rt_delay : 
		( sel_sv = SV_DRUG2_ID ? SV_DRUG2_RT + rt_delay : 0 ))))))))));

//to compute the overall failure rate 
formula sv_fr = ( sel_sv = SV_ALARM1_ID ? SV_ALARM1_FR :
		( sel_sv = SV_ALARM2_ID ? SV_ALARM2_FR :
		( sel_sv = SV_ALARM3_ID ? SV_ALARM3_FR :
		( sel_sv = SV_MEDIC1_ID ? SV_MEDIC1_FR :
		( sel_sv = SV_MEDIC2_ID ? SV_MEDIC2_FR :
		( sel_sv = SV_MEDIC3_ID ? SV_MEDIC3_FR :
		( sel_sv = SV_MEDIC4_ID ? SV_MEDIC4_FR :
                ( sel_sv = SV_MEDIC5_ID ? SV_MEDIC5_FR : 
		( sel_sv = SV_DRUG1_ID ? SV_DRUG1_FR : 
		( sel_sv = SV_DRUG2_ID ? SV_DRUG2_FR : 0 ))))))))));


//to compute the satisfaction of adaptation goal of response time
formula sat_rt = (sv_rt<MAX_RT?true:false);

//to compute the satisfaction of adaptation goal of cost
formula sat_cs = (sv_cs<MAX_CS?true:false);

//to compute the satisfaction of adaptation goal of failure rate
formula sat_fr = (sv_fr<MAX_FR?true:false);

formula sat = ( GOAL_TY = GOAL_TY_CS ? sat_cs :
	      (	GOAL_TY = GOAL_TY_FR ? sat_fr :
	      (	GOAL_TY = GOAL_TY_RT ? sat_rt : false )));


//==============================================
//Computing the utility
//Why I need the reward? to hold the total time?
rewards "time"
	t = TP : sv_rt;
endrewards

rewards "cost"
	t = TP : sv_cs;
endrewards

rewards "reliability"
	t = TP : sv_fr;
endrewards


label "done" = end = true;