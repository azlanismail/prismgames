// optimal planning for self-adaptation
// by Azlan Ismail
  

smg

// player for the controller
player am 
controller, [rs0], [rs1], [rs2],[rs3], [rs4]
endplayer

//player for the environment
player env 
environment 
endplayer


//======================================================================
//inputs parameters

//USER-DEFINED PARAMETERS
const int MAXR = 1;  //UB for retry
const int MAXS = 5;  //UB for the number of collaborators
const double MAXUT = 0.7; //UB for the utility value
const int GOAL_TY = 1; //UB for collaborators
const int GOAL_TY_Q1 = 1; //performance violation
const int GOAL_TY_Q2 = 2; //availability
const int GOAL_TY_Q3 = 3; //safety
const int GOAL_TY_UT = 4; //utility-based
const int GOAL_TY_ML = 5; //multi

//PROBING PARAMETERS
const int RS_REQ_ID = 1; //initiator or requestor
const bool CURA = true; //current availability
const bool CURP = true; //current performance
const bool CURF = true; //current safety
const int DELAY = 3;  //current delay

//PROFILING PARAMETERS
const int RS0_ID = 0;
const double RS0_RS = 0.3;
const int RS0_RT = 3;

const int RS1_ID = 1;
const double RS1_RS = 0.3;
const int RS1_RT = 7;

const int RS2_ID = 2;
const double RS2_RS = 0.3;
const int RS2_RT = 2;

const int RS3_ID = 3;
const double RS3_RS = 0.3;
const int RS3_RT = 6;

const int RS4_ID = 4;
const double RS4_RS = 0.3;
const int RS4_RT = 5;

//======================================================
//CONTROLLING PARAMETERS

//to control the turn
const TE=0;
const TP=1;
global t:[TE..TP] init TP;

//to constraint the selection
global goal : bool init false;	//requirement

//to terminate the adaptation
global end : bool init false;	//(absorbing state)

//======================================================
// player controller

module controller
s:[-1..MAXS] init -1; //states for the resource collaborator selection
r:[0..MAXR] init 0;  //states for the retry

	
// Propositions to control the move of P1 (to select a collaborator):
// (turn) the turn is meant for P1
// (adapt) the collaborator is not itself
// (constraints) the goals/constraints are satisfied

[rs0] (t=TP) & (RS_REQ_ID != RS0_ID) & (s=-1) & (sat=true) -> (s'= RS0_ID) & (r'=r+1) & (t'=TE);
[rs1] (t=TP) & (RS_REQ_ID != RS1_ID) & (s=-1) & (sat=true) -> (s'= RS1_ID) & (r'=r+1) & (t'=TE);
[rs2] (t=TP) & (RS_REQ_ID != RS2_ID) & (s=-1) & (sat=true) -> (s'= RS2_ID) & (r'=r+1) & (t'=TE);
[rs3] (t=TP) & (RS_REQ_ID != RS3_ID) & (s=-1) & (sat=true) -> (s'= RS3_ID) & (r'=r+1) & (t'=TE);
[rs4] (t=TP) & (RS_REQ_ID != RS4_ID) & (s=-1) & (sat=true) -> (s'= RS4_ID) & (r'=r+1) & (t'=TE);

//terminate
[] (t=TP) & (r>=MAXR) & (end=false) -> (end'=true);

endmodule

//====================================================
//player environment

module environment
a: bool init CURA; //state for the availability
p: bool init CURP; //state for the performance violation
f: bool init CURF; //state for the security/safety violation

// Propositions to control the move of P2:
// (turn) the turn is meant for P2
// (availability) change the behavior of availability state
// (performance) change the behavior of performance state
// (security) change the behavior of security state

[] (t=TE) -> 0.3:(a'=false)&(t'=TP) + 0.7:(a'=true)&(t'=TP);
[] (t=TE) -> 0.3:(p'=false)&(t'=TP) + 0.7:(p'=true)&(t'=TP);
[] (t=TE) -> 0.3:(f'=false)&(t'=TP) + 0.7:(f'=true)&(t'=TP);

endmodule

//=============================================
//QoS COMPUTATION FOR EACH METRIC

//to compute the overall response time
formula rt_all =( s = RS0_ID ? RS0_RT + DELAY :
        	( s = RS1_ID ? RS1_RT + DELAY :
        	( s = RS2_ID ? RS2_RT + DELAY :
        	( s = RS3_ID ? RS3_RT + DELAY :
               	( s = RS4_ID ? RS4_RT + DELAY : 0 )))));


//==============================================
//Computation for aggregation-based 

//formula uv_all = uv_cs * WG_CS + uv_rt * WG_RT + uv_fr * WG_FR;
formula uv_all = 0.6;

//=============================================
//QoS CONSTRAINTS CHECKING

//to check the satisfaction of performance
//false means violated, true means healthy
formula sat_q1 = p;

//to check the satisfaction of availability (associated to the failure too)
//false means unavailable, true means available
formula sat_q2 = a;

//to check the satisfaction of safety
//false means unsafe, true means safe
formula sat_q3 = f;

//to check the satisfaction of overall quality based on individual metric
//true if only each of them is true, otherwise false
formula sat_ml_all = ( (sat_q1=true) & (sat_q2=true) & (sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility 
formula sat_ut_all = ( uv_all <= MAXUT ? true:false);


//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula sat = ( GOAL_TY = GOAL_TY_Q1 ? sat_q1 :
              ( GOAL_TY = GOAL_TY_Q2 ? sat_q2 :
              ( GOAL_TY = GOAL_TY_Q3 ? sat_q3 :
              ( GOAL_TY = GOAL_TY_UT ? sat_ut_all :
              ( GOAL_TY = GOAL_TY_ML ? sat_ml_all : false)))));


//==============================================
// associating the computed QoS to the reward

rewards "time"
	t = TP : rt_all;
endrewards

label "done" = end = true;