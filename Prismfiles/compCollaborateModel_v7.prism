smg

//top level system 
system "MC"
"C1" || "C2"  //a set of decision makers / components
endsystem

//sub-system
system "C1"
M1
endsystem

//====================================
//inputs parameters

//USER-DEFINED PARAMETERS
const int MAXR = 2;  //UB for retry
const int MAXS = 4;  //UB for the number of collaborators
const double MAXUT = 0.7; //UB for the utility value
const int GOAL_TY = 5; //UB for collaborators (for filtering)
const int GOAL_TY_Q1 = 1; //performance violation
const int GOAL_TY_Q2 = 2; //availability
const int GOAL_TY_Q3 = 3; //safety
const int GOAL_TY_UT = 4; //utility-based
const int GOAL_TY_ML = 5; //multi

//PROBING PARAMETERS


//=======Application Requirements===========
const int APP0_ID = 0;
const double APP0_CPU_CORES = 0.3;
const double APP0_CPU_LOADS = 0.4;
const double APP0_CPU_SPEED = 0.5;

const int APP1_ID = 1;
const double APP1_CPU_CORES = 0.5;
const double APP1_CPU_LOADS = 0.4;
const double APP1_CPU_SPEED = 0.3;


//========Resource/Node Profiles===========

const int RS0_ID = 0;
const double RS0_CPU_CORES = 0.3;
const double RS0_CPU_LOADS = 0.3;
const double RS0_CPU_SPEED = 0.3;

const int RS1_ID = 1;
const double RS1_CPU_CORES = 0.3;
const double RS1_CPU_LOADS = 0.3;
const double RS1_CPU_SPEED = 0.3;

const int RS2_ID = 2;
const double RS2_CPU_CORES = 0.5;
const double RS2_CPU_LOADS = 0.5;
const double RS2_CPU_SPEED = 0.5;

const int RS3_ID = 3;
const double RS3_CPU_CORES = 0.7;
const double RS3_CPU_LOADS = 0.7;
const double RS3_CPU_SPEED = 0.7;

const int RS4_ID = 4;
const double RS4_CPU_CORES = 0.7;
const double RS4_CPU_LOADS = 0.7;
const double RS4_CPU_SPEED = 0.7;

//=======================================
//CONTROLLING PARAMETERS


//=======================================
module M1
ta:[0..2] init 1;      //to control the turn
goala: bool init false;
av0a: bool init true;
av1a: bool init true;
av2a: bool init true;
av3a: bool init true;
av4a: bool init true;

// P1 moves:
//appx_rsy_sat - represents the satisfaction of performance violation
[r0a!] (ta=0) & (app0_rs0_sat=true) & (goala=false) -> (goala'=true) & (ta'=1);
[r1a!] (ta=0) & (app0_rs1_sat=true) & (goala=false) -> (goala'=true) & (ta'=1);
[r2a!] (ta=0) & (app0_rs2_sat=true) & (goala=false) -> (goala'=true) & (ta'=1);
[r3a!] (ta=0) & (app0_rs3_sat=true) & (goala=false) -> (goala'=true) & (ta'=1);
[r4a!] (ta=0) & (app0_rs4_sat=true) & (goala=false) -> (goala'=true) & (ta'=1);
//terminate the process
[enda!] (ta=0) & (goala=true) -> (ta'=2);

// P2 moves:
[r0aa?] (ta=1) -> 0.9:(av0a'=true) & (ta'=2) + 0.1:(av0a'=false) & (ta'=2);
[r1aa?] (ta=1) -> 0.9:(av1a'=true) & (ta'=2) + 0.1:(av1a'=false) & (ta'=2);
[r2aa?] (ta=1) -> 0.9:(av2a'=true) & (ta'=2) + 0.1:(av2a'=false) & (ta'=2);
[r3aa?] (ta=1) -> 0.9:(av3a'=true) & (ta'=2) + 0.1:(av3a'=false) & (ta'=2);
[r4aa?] (ta=1) -> 0.9:(av4a'=true) & (ta'=2) + 0.1:(av4a'=false) & (ta'=2);

//start the move
[st1?] (ta=1) -> (ta'=2);
[st2?] (ta=2) -> (ta'=2);

//schedule the turn between subsystems
[] (ta=2) -> (ta'=0);

endmodule

//=============================================
//=============================================
//=============================================
system "C2"
M2
endsystem

//module M2=M1 [t1=t2, s1=s2, r1=r2, r0a=r0b, r1a=r1b, r2a=r2b, r3a=r3b, r4a=r4b, enda=endb] endmodule

module M2
tb:[0..2] init 1;      //to control the turn
goalb: bool init false;
av0b: bool init true;
av1b: bool init true;
av2b: bool init true;
av3b: bool init true;
av4b: bool init true;

// P1 moves:
[r0b!] (tb=0) & (app1_rs0_sat=true) & (goalb=false) -> (goalb'=true) & (tb'=1);
[r1b!] (tb=0) & (app1_rs1_sat=true) & (goalb=false) -> (goalb'=true) & (tb'=1);
[r2b!] (tb=0) & (app1_rs2_sat=true) & (goalb=false) -> (goalb'=true) & (tb'=1);
[r3b!] (tb=0) & (app1_rs3_sat=true) & (goalb=false) -> (goalb'=true) & (tb'=1);
[r4b!] (tb=0) & (app1_rs4_sat=true) & (goalb=false) -> (goalb'=true) & (tb'=1);
//terminate the process
[endb!] (tb=0) & (goalb=true) -> (tb'=2);

// P2 moves:
[r0bb?] (tb=1) -> 0.9:(av0b'=true) & (tb'=2) + 0.1:(av0b'=false) & (tb'=2);
[r1bb?] (tb=1) -> 0.9:(av1b'=true) & (tb'=2) + 0.1:(av1b'=false) & (tb'=2);
[r2bb?] (tb=1) -> 0.9:(av2b'=true) & (tb'=2) + 0.1:(av2b'=false) & (tb'=2);
[r3bb?] (tb=1) -> 0.9:(av3b'=true) & (tb'=2) + 0.1:(av3b'=false) & (tb'=2);
[r4bb?] (tb=1) -> 0.9:(av4b'=true) & (tb'=2) + 0.1:(av4b'=false) & (tb'=2);

//start the move
[st1?] (tb=1) -> (tb'=2);
[st2?] (tb=2) -> (tb'=2);

//schedule the turn between subsystems
[] (tb=2) -> (tb'=0);

endmodule


//=================================
//Computation for aggregation-based

//formula uv_all = uv_cs * WG_CS + uv_rt * WG_RT + uv_fr * WG_FR;
formula app0_uv_all = 0.6;
formula app1_uv_all = 0.6;

//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS0

//to get the respective cores value
formula app0_rs0_cpu_cores_selected = RS0_CPU_CORES;

//to check the satisfaction of CPU Cores
formula app0_rs0_sat_q1 = ( (APP0_CPU_CORES < app0_rs0_cpu_cores_selected) ? true:false);

//to get the respective loads value
formula app0_rs0_cpu_loads_selected = RS0_CPU_LOADS;

//to check the satisfaction of CPU Loads
formula app0_rs0_sat_q2 = ( (APP0_CPU_LOADS < app0_rs0_cpu_loads_selected) ? true:false);

//to get the respective speeds value
formula app0_rs0_cpu_speed_selected = RS0_CPU_SPEED;

//to check the satisfaction of CPU Speeds
formula app0_rs0_sat_q3 = ( (APP0_CPU_SPEED < app0_rs0_cpu_speed_selected) ? true:false);


//to check the satisfaction of overall quality for each node
formula app0_rs0_sat_ml_all = ( (app0_rs0_sat_q1=true) & (app0_rs0_sat_q2=true) & (app0_rs0_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs0_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs0_sat = ( GOAL_TY = GOAL_TY_Q1 ? app0_rs0_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs0_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs0_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs0_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs0_sat_ml_all : false)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS1

//to get the respective cores value
formula app0_rs1_cpu_cores_selected = RS1_CPU_CORES;

//to check the satisfaction of CPU Cores
formula app0_rs1_sat_q1 = ( (APP0_CPU_CORES < app0_rs1_cpu_cores_selected) ? true:false);

//to get the respective loads value
formula app0_rs1_cpu_loads_selected = RS1_CPU_LOADS;

//to check the satisfaction of CPU Loads
formula app0_rs1_sat_q2 = ( (APP0_CPU_LOADS < app0_rs1_cpu_loads_selected) ? true:false);

//to get the respective speeds value
formula app0_rs1_cpu_speed_selected = RS1_CPU_SPEED;

//to check the satisfaction of CPU Speeds
formula app0_rs1_sat_q3 = ( (APP0_CPU_SPEED < app0_rs1_cpu_speed_selected) ? true:false);


//to check the satisfaction of overall quality for each node
formula app0_rs1_sat_ml_all = ( (app0_rs1_sat_q1=true) & (app0_rs1_sat_q2=true) & (app0_rs1_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs1_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs1_sat = ( GOAL_TY = GOAL_TY_Q1 ? app0_rs1_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs1_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs1_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs1_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs1_sat_ml_all : false)))));

//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS2

//to get the respective cores value
formula app0_rs2_cpu_cores_selected = RS2_CPU_CORES;

//to check the satisfaction of CPU Cores
formula app0_rs2_sat_q1 = ( (APP0_CPU_CORES < app0_rs2_cpu_cores_selected) ? true:false);

//to get the respective loads value
formula app0_rs2_cpu_loads_selected = RS2_CPU_LOADS;

//to check the satisfaction of CPU Loads
formula app0_rs2_sat_q2 = ( (APP0_CPU_LOADS < app0_rs2_cpu_loads_selected) ? true:false);

//to get the respective speeds value
formula app0_rs2_cpu_speed_selected = RS2_CPU_SPEED;

//to check the satisfaction of CPU Speeds
formula app0_rs2_sat_q3 = ( (APP0_CPU_SPEED < app0_rs2_cpu_speed_selected) ? true:false);


//to check the satisfaction of overall quality for each node
formula app0_rs2_sat_ml_all = ( (app0_rs2_sat_q1=true) & (app0_rs2_sat_q2=true) & (app0_rs2_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs2_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs2_sat = ( GOAL_TY = GOAL_TY_Q1 ? app0_rs2_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs2_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs2_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs2_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs2_sat_ml_all : false)))));

//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS3

//to get the respective cores value
formula app0_rs3_cpu_cores_selected = RS3_CPU_CORES;

//to check the satisfaction of CPU Cores
formula app0_rs3_sat_q1 = ( (APP0_CPU_CORES < app0_rs3_cpu_cores_selected) ? true:false);

//to get the respective loads value
formula app0_rs3_cpu_loads_selected = RS3_CPU_LOADS;

//to check the satisfaction of CPU Loads
formula app0_rs3_sat_q2 = ( (APP0_CPU_LOADS < app0_rs3_cpu_loads_selected) ? true:false);

//to get the respective speeds value
formula app0_rs3_cpu_speed_selected = RS3_CPU_SPEED;

//to check the satisfaction of CPU Speeds
formula app0_rs3_sat_q3 = ( (APP0_CPU_SPEED < app0_rs3_cpu_speed_selected) ? true:false);


//to check the satisfaction of overall quality for each node
formula app0_rs3_sat_ml_all = ( (app0_rs3_sat_q1=true) & (app0_rs3_sat_q2=true) & (app0_rs3_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs3_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs3_sat = ( GOAL_TY = GOAL_TY_Q1 ? app0_rs3_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs3_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs3_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs3_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs3_sat_ml_all : false)))));

//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS4

//to get the respective cores value
formula app0_rs4_cpu_cores_selected = RS4_CPU_CORES;

//to check the satisfaction of CPU Cores
formula app0_rs4_sat_q1 = ( (APP0_CPU_CORES < app0_rs4_cpu_cores_selected) ? true:false);

//to get the respective loads value
formula app0_rs4_cpu_loads_selected = RS4_CPU_LOADS;

//to check the satisfaction of CPU Loads
formula app0_rs4_sat_q2 = ( (APP0_CPU_LOADS < app0_rs4_cpu_loads_selected) ? true:false);

//to get the respective speeds value
formula app0_rs4_cpu_speed_selected = RS4_CPU_SPEED;

//to check the satisfaction of CPU Speeds
formula app0_rs4_sat_q3 = ( (APP0_CPU_SPEED < app0_rs4_cpu_speed_selected) ? true:false);


//to check the satisfaction of overall quality for each node
formula app0_rs4_sat_ml_all = ( (app0_rs4_sat_q1=true) & (app0_rs4_sat_q2=true) & (app0_rs4_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs4_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs4_sat = ( GOAL_TY = GOAL_TY_Q1 ? app0_rs4_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs4_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs4_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs4_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs4_sat_ml_all : false)))));

//=================================
//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS0========

//to get the respective cores value
formula app1_rs0_cpu_cores_selected = RS0_CPU_CORES;

//to check the satisfaction of CPU Cores
formula app1_rs0_sat_q1 = ( (APP1_CPU_CORES < app1_rs0_cpu_cores_selected) ? true:false);

//to get the respective loads value
formula app1_rs0_cpu_loads_selected = RS0_CPU_LOADS;

//to check the satisfaction of CPU Loads
formula app1_rs0_sat_q2 = ( (APP1_CPU_LOADS < app1_rs0_cpu_loads_selected) ? true:false);

//to get the respective speeds value
formula app1_rs0_cpu_speed_selected = RS0_CPU_SPEED;

//to check the satisfaction of CPU Speeds
formula app1_rs0_sat_q3 = ( (APP1_CPU_SPEED < app1_rs0_cpu_speed_selected) ? true:false);


//to check the satisfaction of overall quality for each node
formula app1_rs0_sat_ml_all = ( (app1_rs0_sat_q1=true) & (app1_rs0_sat_q2=true) & (app1_rs0_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs0_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs0_sat = ( GOAL_TY = GOAL_TY_Q1 ? app1_rs0_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs0_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs0_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs0_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs0_sat_ml_all : false)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS1========

//to get the respective cores value
formula app1_rs1_cpu_cores_selected = RS1_CPU_CORES;

//to check the satisfaction of CPU Cores
formula app1_rs1_sat_q1 = ( (APP1_CPU_CORES < app1_rs1_cpu_cores_selected) ? true:false);

//to get the respective loads value
formula app1_rs1_cpu_loads_selected = RS1_CPU_LOADS;

//to check the satisfaction of CPU Loads
formula app1_rs1_sat_q2 = ( (APP1_CPU_LOADS < app1_rs1_cpu_loads_selected) ? true:false);

//to get the respective speeds value
formula app1_rs1_cpu_speed_selected = RS1_CPU_SPEED;

//to check the satisfaction of CPU Speeds
formula app1_rs1_sat_q3 = ( (APP1_CPU_SPEED < app1_rs1_cpu_speed_selected) ? true:false);


//to check the satisfaction of overall quality for each node
formula app1_rs1_sat_ml_all = ( (app1_rs1_sat_q1=true) & (app1_rs1_sat_q2=true) & (app1_rs1_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs1_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs1_sat = ( GOAL_TY = GOAL_TY_Q1 ? app1_rs1_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs1_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs1_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs1_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs1_sat_ml_all : false)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS2========

//to get the respective cores value
formula app1_rs2_cpu_cores_selected = RS2_CPU_CORES;

//to check the satisfaction of CPU Cores
formula app1_rs2_sat_q1 = ( (APP1_CPU_CORES < app1_rs2_cpu_cores_selected) ? true:false);

//to get the respective loads value
formula app1_rs2_cpu_loads_selected = RS2_CPU_LOADS;

//to check the satisfaction of CPU Loads
formula app1_rs2_sat_q2 = ( (APP1_CPU_LOADS < app1_rs2_cpu_loads_selected) ? true:false);

//to get the respective speeds value
formula app1_rs2_cpu_speed_selected = RS2_CPU_SPEED;

//to check the satisfaction of CPU Speeds
formula app1_rs2_sat_q3 = ( (APP1_CPU_SPEED < app1_rs2_cpu_speed_selected) ? true:false);


//to check the satisfaction of overall quality for each node
formula app1_rs2_sat_ml_all = ( (app1_rs2_sat_q1=true) & (app1_rs2_sat_q2=true) & (app1_rs2_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs2_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs2_sat = ( GOAL_TY = GOAL_TY_Q1 ? app1_rs2_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs2_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs2_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs2_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs2_sat_ml_all : false)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS3========

//to get the respective cores value
formula app1_rs3_cpu_cores_selected = RS3_CPU_CORES;

//to check the satisfaction of CPU Cores
formula app1_rs3_sat_q1 = ( (APP1_CPU_CORES < app1_rs3_cpu_cores_selected) ? true:false);

//to get the respective loads value
formula app1_rs3_cpu_loads_selected = RS3_CPU_LOADS;

//to check the satisfaction of CPU Loads
formula app1_rs3_sat_q2 = ( (APP1_CPU_LOADS < app1_rs3_cpu_loads_selected) ? true:false);

//to get the respective speeds value
formula app1_rs3_cpu_speed_selected = RS3_CPU_SPEED;

//to check the satisfaction of CPU Speeds
formula app1_rs3_sat_q3 = ( (APP1_CPU_SPEED < app1_rs3_cpu_speed_selected) ? true:false);


//to check the satisfaction of overall quality for each node
formula app1_rs3_sat_ml_all = ( (app1_rs3_sat_q1=true) & (app1_rs3_sat_q2=true) & (app1_rs3_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs3_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs3_sat = ( GOAL_TY = GOAL_TY_Q1 ? app1_rs3_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs3_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs3_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs3_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs3_sat_ml_all : false)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS4========

//to get the respective cores value
formula app1_rs4_cpu_cores_selected = RS4_CPU_CORES;

//to check the satisfaction of CPU Cores
formula app1_rs4_sat_q1 = ( (APP1_CPU_CORES < app1_rs4_cpu_cores_selected) ? true:false);

//to get the respective loads value
formula app1_rs4_cpu_loads_selected = RS4_CPU_LOADS;

//to check the satisfaction of CPU Loads
formula app1_rs4_sat_q2 = ( (APP1_CPU_LOADS < app1_rs4_cpu_loads_selected) ? true:false);

//to get the respective speeds value
formula app1_rs4_cpu_speed_selected = RS4_CPU_SPEED;

//to check the satisfaction of CPU Speeds
formula app1_rs4_sat_q3 = ( (APP1_CPU_SPEED < app1_rs4_cpu_speed_selected) ? true:false);


//to check the satisfaction of overall quality for each node
formula app1_rs4_sat_ml_all = ( (app1_rs4_sat_q1=true) & (app1_rs4_sat_q2=true) & (app1_rs4_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs4_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs4_sat = ( GOAL_TY = GOAL_TY_Q1 ? app1_rs4_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs4_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs4_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs4_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs4_sat_ml_all : false)))));


//==============================================
//REWARD STRUCTURE

//time dimension: CPU speed
rewards "c1_rt"
[enda] true : app0_rs0_cpu_speed_selected;
[enda] true : app0_rs1_cpu_speed_selected;
[enda] true : app0_rs2_cpu_speed_selected;
[enda] true : app0_rs3_cpu_speed_selected;
[enda] true : app0_rs4_cpu_speed_selected;
endrewards

rewards "c2_rt"
[endb] true : app1_rs0_cpu_speed_selected;
[endb] true : app1_rs1_cpu_speed_selected;
[endb] true : app1_rs2_cpu_speed_selected;
[endb] true : app1_rs3_cpu_speed_selected;
[endb] true : app1_rs4_cpu_speed_selected;
endrewards

//resource dimension: CPU cores
rewards "c1_ru"
[enda] true : app0_rs0_cpu_cores_selected;
[enda] true : app0_rs1_cpu_cores_selected;
[enda] true : app0_rs2_cpu_cores_selected;
[enda] true : app0_rs3_cpu_cores_selected;
[enda] true : app0_rs4_cpu_cores_selected;
endrewards

rewards "c2_ru"
[endb] true : app1_rs0_cpu_cores_selected;
[endb] true : app1_rs1_cpu_cores_selected;
[endb] true : app1_rs2_cpu_cores_selected;
[endb] true : app1_rs3_cpu_cores_selected;
[endb] true : app1_rs4_cpu_cores_selected;
endrewards

label "done1" = ta = 2;
label "done2" = tb = 2;
