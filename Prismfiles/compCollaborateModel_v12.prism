smg

//top level system 
system "MC"
"C1" || "C2"  //a set of decision makers / components
endsystem

//sub-system
system "C1"
M1
endsystem

//====================================
//inputs parameters

//USER-DEFINED PARAMETERS
const double MAXUT = 0.7; //UB for the utility value
const int GOAL_TY = 5; //UB for collaborators (for filtering)
const int GOAL_TY_Q1 = 1; //performance violation
const int GOAL_TY_Q2 = 2; //availability
const int GOAL_TY_Q3 = 3; //safety
const int GOAL_TY_UT = 4; //utility-based
const int GOAL_TY_ML = 5; //multi

//PROBING PARAMETERS


//=======Application Requirements===========
const int APP0_ID = 0;
const int APP0_CPU_CORES = 1;
const double APP0_CPU_LOADS = 0.4;
const int APP0_CPU_SPEED = 300;
const int APP0_TOTALMEMORY = 20;
const int APP0_FREEMEMORY = 20;
const int APP0_LOCATION = 1;

const int APP1_ID = 1;
const int APP1_CPU_CORES = 1;
const double APP1_CPU_LOADS = 0.5;
const int APP1_CPU_SPEED = 600;
const int APP1_TOTALMEMORY = 20;
const int APP1_FREEMEMORY = 20;
const int APP1_LOCATION = 1;


//========Resource/Node Profiles===========

const int RS0_ID = 0;
const int RS0_CPU_CORES = 1;
const double RS0_CPU_LOADS = 0.3;
const int RS0_CPU_SPEED = 2000;
const int RS0_TOTALMEMORY = 1000;
const int RS0_FREEMEMORY = 300;
const int RS0_LOCATION = 0;

const int RS1_ID = 1;
const int RS1_CPU_CORES = 1;
const double RS1_CPU_LOADS = 0.3;
const int RS1_CPU_SPEED = 2000;
const int RS1_TOTALMEMORY = 1000;
const int RS1_FREEMEMORY = 600;
const int RS1_LOCATION = 1;

const int RS2_ID = 2;
const int RS2_CPU_CORES = 1;
const double RS2_CPU_LOADS = 0.5;
const int RS2_CPU_SPEED = 2593;
const int RS2_TOTALMEMORY = 1000;
const int RS2_FREEMEMORY = 700;
const int RS2_LOCATION = 2;

const int RS3_ID = 3;
const int RS3_CPU_CORES = 1;
const double RS3_CPU_LOADS = 0.7;
const int RS3_CPU_SPEED = 2593;
const int RS3_TOTALMEMORY = 1000;
const int RS3_FREEMEMORY = 300;
const int RS3_LOCATION = 3;

const int RS4_ID = 4;
const int RS4_CPU_CORES = 1;
const double RS4_CPU_LOADS = 0.7;
const int RS4_CPU_SPEED = 2593;
const int RS4_TOTALMEMORY = 1000;
const int RS4_FREEMEMORY = 550;
const int RS4_LOCATION = 4;

const int RS5_ID = 5;
const int RS5_CPU_CORES = 1;
const double RS5_CPU_LOADS = 0.7;
const int RS5_CPU_SPEED = 2593;
const int RS5_TOTALMEMORY = 1000;
const int RS5_FREEMEMORY = 450;
const int RS5_LOCATION = 5;

const int RS6_ID = 6;
const int RS6_CPU_CORES = 1;
const double RS6_CPU_LOADS = 0.7;
const int RS6_CPU_SPEED = 2593;
const int RS6_TOTALMEMORY = 1000;
const int RS6_FREEMEMORY = 650;
const int RS6_LOCATION = 6;

const int RS7_ID = 7;
const int RS7_CPU_CORES = 1;
const double RS7_CPU_LOADS = 0.7;
const int RS7_CPU_SPEED = 2000;
const int RS7_TOTALMEMORY = 1000;
const int RS7_FREEMEMORY = 800;
const int RS7_LOCATION = 7;


//=======================================
//CONTROLLING PARAMETERS

global goala: bool init false;
global goalb: bool init false;
global av0: bool init true;
global av1: bool init true;
global av2: bool init true;
global av3: bool init true;
global av4: bool init true;
global av5: bool init true;
global av6: bool init true;
global av7: bool init true;
//=======================================
module M1
ta:[0..2] init 1;      //to control the turn
sela:[0..7] init 0;
//goala: bool init false;
//av0a: bool init true;
//av1a: bool init true;
//av2a: bool init true;
//av3a: bool init true;
//av4a: bool init true;
//av5a: bool init true;
//av6a: bool init true;
//av7a: bool init true;

// P1 moves:
//appx_rsy_sat - represents the satisfaction of performance violation
[r0a!] (ta=0) & (app0_rs0_sat=true) & (goala=false) & (av0=true) -> (goala'=true) & (sela'=0) & (ta'=1);
[r1a!] (ta=0) & (app0_rs1_sat=true) & (goala=false) & (av1=true) -> (goala'=true) & (sela'=1) & (ta'=1);
[r2a!] (ta=0) & (app0_rs2_sat=true) & (goala=false) & (av2=true) -> (goala'=true) & (sela'=2) & (ta'=1);
[r3a!] (ta=0) & (app0_rs3_sat=true) & (goala=false) & (av3=true) -> (goala'=true) & (sela'=3) & (ta'=1);
[r4a!] (ta=0) & (app0_rs4_sat=true) & (goala=false) & (av4=true) -> (goala'=true) & (sela'=4) & (ta'=1);
[r5a!] (ta=0) & (app0_rs5_sat=true) & (goala=false) & (av5=true) -> (goala'=true) & (sela'=5) & (ta'=1);
[r6a!] (ta=0) & (app0_rs6_sat=true) & (goala=false) & (av6=true) -> (goala'=true) & (sela'=6) & (ta'=1);
[r7a!] (ta=0) & (app0_rs7_sat=true) & (goala=false) & (av7=true) -> (goala'=true) & (sela'=7) & (ta'=1);
//terminate the process
[enda!] (ta=0) & (goala=true) -> (ta'=2);

// P2 moves:
[ch0?] (ta=1) & (sela=0) -> 0.9:(av0'=true) & (ta'=2) + 0.1:(av0'=false) & (goala'=false) & (goalb'=false) & (ta'=2);
[ch1?] (ta=1) & (sela=1) -> 0.9:(av1'=true) & (ta'=2) + 0.1:(av1'=false) & (goala'=false) & (goalb'=false) & (ta'=2);
[ch2?] (ta=1) & (sela=2) -> 0.9:(av2'=true) & (ta'=2) + 0.1:(av2'=false) & (goala'=false) & (goalb'=false) & (ta'=2);
[ch3?] (ta=1) & (sela=3) -> 0.9:(av3'=true) & (ta'=2) + 0.1:(av3'=false) & (goala'=false) & (goalb'=false) & (ta'=2);
[ch4?] (ta=1) & (sela=4) -> 0.9:(av4'=true) & (ta'=2) + 0.1:(av4'=false) & (goala'=false) & (goalb'=false) & (ta'=2);
[ch5?] (ta=1) & (sela=5) -> 0.9:(av5'=true) & (ta'=2) + 0.1:(av5'=false) & (goala'=false) & (goalb'=false) & (ta'=2);
[ch6?] (ta=1) & (sela=6) -> 0.9:(av6'=true) & (ta'=2) + 0.1:(av6'=false) & (goala'=false) & (goalb'=false) & (ta'=2);
[ch7?] (ta=1) & (sela=7) -> 0.9:(av7'=true) & (ta'=2) + 0.1:(av7'=false) & (goala'=false) & (goalb'=false) & (ta'=2);

//start the move
//[be1?] (ta=1) -> (ta'=2);
//[st2?] (ta=2) -> (ta'=2);

//schedule the turn between subsystems
[] (ta=2) -> (ta'=0);

endmodule

//=============================================
//=============================================
//=============================================
system "C2"
M2
endsystem

//module M2=M1 [t1=t2, s1=s2, r1=r2, r0a=r0b, r1a=r1b, r2a=r2b, r3a=r3b, r4a=r4b, enda=endb] endmodule

module M2
tb:[0..2] init 1;      //to control the turn
selb:[0..7] init 0;
//goalb: bool init false;
//av0b: bool init true;
//av1b: bool init true;
//av2b: bool init true;
//av3b: bool init true;
//av4b: bool init true;
//av5b: bool init true;
//av6b: bool init true;
//av7b: bool init true;

// P1 moves:
[r0b!] (tb=0) & (app1_rs0_sat=true) & (goalb=false) & (av0=true) -> (goalb'=true) & (selb'=0) & (tb'=1);
[r1b!] (tb=0) & (app1_rs1_sat=true) & (goalb=false) & (av1=true) -> (goalb'=true) & (selb'=1) & (tb'=1);
[r2b!] (tb=0) & (app1_rs2_sat=true) & (goalb=false) & (av2=true) -> (goalb'=true) & (selb'=2) & (tb'=1);
[r3b!] (tb=0) & (app1_rs3_sat=true) & (goalb=false) & (av3=true) -> (goalb'=true) & (selb'=3) & (tb'=1);
[r4b!] (tb=0) & (app1_rs4_sat=true) & (goalb=false) & (av4=true) -> (goalb'=true) & (selb'=4) & (tb'=1);
[r5b!] (tb=0) & (app1_rs5_sat=true) & (goalb=false) & (av5=true) -> (goalb'=true) & (selb'=5) & (tb'=1);
[r6b!] (tb=0) & (app1_rs6_sat=true) & (goalb=false) & (av6=true) -> (goalb'=true) & (selb'=6) & (tb'=1);
[r7b!] (tb=0) & (app1_rs7_sat=true) & (goalb=false) & (av7=true) -> (goalb'=true) & (selb'=7) & (tb'=1);

//terminate the process
[endb!] (tb=0) & (goalb=true) -> (tb'=2);

// P2 moves:
[ch0?] (tb=1) & (selb=0) -> 0.9:(av0'=true) & (tb'=2) + 0.1:(av0'=false) & (goala'=false) & (goalb'=false) & (tb'=2);
[ch1?] (tb=1) & (selb=1) -> 0.9:(av1'=true) & (tb'=2) + 0.1:(av1'=false) & (goala'=false) & (goalb'=false) & (tb'=2);
[ch2?] (tb=1) & (selb=2) -> 0.9:(av2'=true) & (tb'=2) + 0.1:(av2'=false) & (goala'=false) & (goalb'=false) & (tb'=2);
[ch3?] (tb=1) & (selb=3) -> 0.9:(av3'=true) & (tb'=2) + 0.1:(av3'=false) & (goala'=false) & (goalb'=false) & (tb'=2);
[ch4?] (tb=1) & (selb=4) -> 0.9:(av4'=true) & (tb'=2) + 0.1:(av4'=false) & (goala'=false) & (goalb'=false) & (tb'=2);
[ch5?] (tb=1) & (selb=5) -> 0.9:(av5'=true) & (tb'=2) + 0.1:(av5'=false) & (goala'=false) & (goalb'=false) & (tb'=2);
[ch6?] (tb=1) & (selb=6) -> 0.9:(av6'=true) & (tb'=2) + 0.1:(av6'=false) & (goala'=false) & (goalb'=false) & (tb'=2);
[ch7?] (tb=1) & (selb=7) -> 0.9:(av7'=true) & (tb'=2) + 0.1:(av7'=false) & (goala'=false) & (goalb'=false) & (tb'=2);

//start the move
//[be1?] (tb=1) -> (tb'=2);
//[st2?] (tb=2) -> (tb'=2);

//schedule the turn between subsystems
[] (tb=2) -> (tb'=0);

endmodule


//=================================
//Computation for aggregation-based

//formula uv_all = uv_cs * WG_CS + uv_rt * WG_RT + uv_fr * WG_FR;
formula app0_uv_all = 0.6;
formula app1_uv_all = 0.6;

//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS0

//to check the satisfaction of CPU Cores
formula app0_rs0_sat_q1 = ( (APP0_CPU_CORES <= RS0_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app0_rs0_sat_q2 = ( (APP0_CPU_LOADS <= RS0_CPU_LOADS) ? true:false);

//to check the satisfaction of CPU Speeds
formula app0_rs0_sat_q3 = ( (APP0_CPU_SPEED <= RS0_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app0_rs0_sat_ml_all = ( (app0_rs0_sat_q1=true) & 
				(app0_rs0_sat_q2=true) & 
				(app0_rs0_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs0_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs0_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app0_rs0_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs0_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs0_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs0_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs0_sat_ml_all : true)))));

//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS1

//to check the satisfaction of CPU Cores
formula app0_rs1_sat_q1 = ( (APP0_CPU_CORES <= RS1_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app0_rs1_sat_q2 = ( (APP0_CPU_LOADS <= RS1_CPU_LOADS) ? true:false);

//to check the satisfaction of CPU Speeds
formula app0_rs1_sat_q3 = ( (APP0_CPU_SPEED <= RS1_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app0_rs1_sat_ml_all = ( (app0_rs1_sat_q1=true) & 
				(app0_rs1_sat_q2=true) & 
				(app0_rs1_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs1_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs1_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app0_rs1_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs1_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs1_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs1_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs1_sat_ml_all : true)))));



//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS2

//to check the satisfaction of CPU Cores
formula app0_rs2_sat_q1 = ( (APP0_CPU_CORES <= RS2_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app0_rs2_sat_q2 = ( (APP0_CPU_LOADS <= RS2_CPU_LOADS) ? true:false);

//to check the satisfaction of CPU Speeds
formula app0_rs2_sat_q3 = ( (APP0_CPU_SPEED <= RS2_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app0_rs2_sat_ml_all = ( (app0_rs2_sat_q1=true) & 
				(app0_rs2_sat_q2=true) & 
				(app0_rs2_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs2_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs2_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app0_rs2_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs2_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs2_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs2_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs2_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS3

//to check the satisfaction of CPU Cores
formula app0_rs3_sat_q1 = ( (APP0_CPU_CORES <= RS3_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app0_rs3_sat_q2 = ( (APP0_CPU_LOADS <= RS3_CPU_LOADS) ? true:false);

//to check the satisfaction of CPU Speeds
formula app0_rs3_sat_q3 = ( (APP0_CPU_SPEED <= RS3_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app0_rs3_sat_ml_all = ( (app0_rs3_sat_q1=true) & 
				(app0_rs3_sat_q2=true) & 
				(app0_rs3_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs3_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs3_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app0_rs3_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs3_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs3_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs3_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs3_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS4

//to check the satisfaction of CPU Cores
formula app0_rs4_sat_q1 = ( (APP0_CPU_CORES <= RS4_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app0_rs4_sat_q2 = ( (APP0_CPU_LOADS <= RS4_CPU_LOADS) ? true:false);

//to check the satisfaction of CPU Speeds
formula app0_rs4_sat_q3 = ( (APP0_CPU_SPEED <= RS4_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app0_rs4_sat_ml_all = ( (app0_rs4_sat_q1=true) & 
				(app0_rs4_sat_q2=true) & 
				(app0_rs4_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs4_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs4_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app0_rs4_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs4_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs4_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs4_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs4_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS5

//to check the satisfaction of CPU Cores
formula app0_rs5_sat_q1 = ( (APP0_CPU_CORES <= RS5_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app0_rs5_sat_q2 = ( (APP0_CPU_LOADS <= RS5_CPU_LOADS) ? true:false);

//to check the satisfaction of CPU Speeds
formula app0_rs5_sat_q3 = ( (APP0_CPU_SPEED <= RS5_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app0_rs5_sat_ml_all = ( (app0_rs5_sat_q1=true) & 
				(app0_rs5_sat_q2=true) & 
				(app0_rs5_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs5_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs5_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app0_rs5_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs5_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs5_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs5_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs5_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS6

//to check the satisfaction of CPU Cores
formula app0_rs6_sat_q1 = ( (APP0_CPU_CORES <= RS6_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app0_rs6_sat_q2 = ( (APP0_CPU_LOADS <= RS6_CPU_LOADS) ? true:false);

//to check the satisfaction of CPU Speeds
formula app0_rs6_sat_q3 = ( (APP0_CPU_SPEED <= RS6_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app0_rs6_sat_ml_all = ( (app0_rs6_sat_q1=true) & 
				(app0_rs6_sat_q2=true) & 
				(app0_rs6_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs6_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs6_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app0_rs6_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs6_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs6_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs6_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs6_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP0 WITH RS7

//to check the satisfaction of CPU Cores
formula app0_rs7_sat_q1 = ( (APP0_CPU_CORES <= RS7_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app0_rs7_sat_q2 = ( (APP0_CPU_LOADS <= RS7_CPU_LOADS) ? true:false);

//to check the satisfaction of CPU Speeds
formula app0_rs7_sat_q3 = ( (APP0_CPU_SPEED <= RS7_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app0_rs7_sat_ml_all = ( (app0_rs7_sat_q1=true) & 
				(app0_rs7_sat_q2=true) & 
				(app0_rs7_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app0_rs7_sat_ut_all = ( app0_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app0_rs7_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app0_rs7_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app0_rs7_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app0_rs7_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app0_rs7_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app0_rs7_sat_ml_all : true)))));




//=================================
//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS0=======

//to check the satisfaction of CPU Cores
formula app1_rs0_sat_q1 = ( (APP1_CPU_CORES <= RS0_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app1_rs0_sat_q2 = ( (APP1_CPU_LOADS <= RS0_CPU_LOADS) ? true:false);

//to check the satisfaction of CPU Speeds
formula app1_rs0_sat_q3 = ( (APP1_CPU_SPEED <= RS0_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app1_rs0_sat_ml_all = ( (app1_rs0_sat_q1=true) & 
				(app1_rs0_sat_q2=true) & 
				(app1_rs0_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs0_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs0_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app1_rs0_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs0_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs0_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs0_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs0_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS1=======

//to check the satisfaction of CPU Cores
formula app1_rs1_sat_q1 = ( (APP1_CPU_CORES <= RS1_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app1_rs1_sat_q2 = ( (APP1_CPU_LOADS <= RS1_CPU_LOADS) ? true:false);

//to check the satisfaction of CPU Speeds
formula app1_rs1_sat_q3 = ( (APP1_CPU_SPEED <= RS1_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app1_rs1_sat_ml_all = ( (app1_rs1_sat_q1=true) & 
				(app1_rs1_sat_q2=true) & 
				(app1_rs1_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs1_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs1_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app1_rs1_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs1_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs1_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs1_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs1_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS2=======

//to check the satisfaction of CPU Cores
formula app1_rs2_sat_q1 = ( (APP1_CPU_CORES <= RS2_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app1_rs2_sat_q2 = ( (APP1_CPU_LOADS <= RS2_CPU_LOADS) ? true:false);

//to check the satisfaction of CPU Speeds
formula app1_rs2_sat_q3 = ( (APP1_CPU_SPEED <= RS2_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app1_rs2_sat_ml_all = ( (app1_rs2_sat_q1=true) & 
				(app1_rs2_sat_q2=true) & 
				(app1_rs2_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs2_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs2_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app1_rs2_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs2_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs2_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs2_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs2_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS3=======

//to check the satisfaction of CPU Cores
formula app1_rs3_sat_q1 = ( (APP1_CPU_CORES <= RS3_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app1_rs3_sat_q2 = ( (APP1_CPU_LOADS <= RS3_CPU_LOADS) ? true:false);

//to check the satisfaction of CPU Speeds
formula app1_rs3_sat_q3 = ( (APP1_CPU_SPEED <= RS3_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app1_rs3_sat_ml_all = ( (app1_rs3_sat_q1=true) & 
				(app1_rs3_sat_q2=true) & 
				(app1_rs3_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs3_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs3_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app1_rs3_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs3_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs3_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs3_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs3_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS4=======

//to check the satisfaction of CPU Cores
formula app1_rs4_sat_q1 = ( (APP1_CPU_CORES <= RS4_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app1_rs4_sat_q2 = ( (APP1_CPU_LOADS <= RS4_CPU_LOADS) ? true:false);

//to check the satisfaction of CPU Speeds
formula app1_rs4_sat_q3 = ( (APP1_CPU_SPEED <= RS4_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app1_rs4_sat_ml_all = ( (app1_rs4_sat_q1=true) & 
				(app1_rs4_sat_q2=true) & 
				(app1_rs4_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs4_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs4_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app1_rs4_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs4_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs4_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs4_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs4_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS5=======

//to check the satisfaction of CPU Cores
formula app1_rs5_sat_q1 = ( (APP1_CPU_CORES <= RS5_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app1_rs5_sat_q2 = ( (APP1_CPU_LOADS <= RS5_CPU_LOADS) ? true:false);

//to check the satisfaction of CPU Speeds
formula app1_rs5_sat_q3 = ( (APP1_CPU_SPEED <= RS5_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app1_rs5_sat_ml_all = ( (app1_rs5_sat_q1=true) & 
				(app1_rs5_sat_q2=true) & 
				(app1_rs5_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs5_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs5_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app1_rs5_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs5_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs5_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs5_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs5_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS6=======

//to check the satisfaction of CPU Cores
formula app1_rs6_sat_q1 = ( (APP1_CPU_CORES <= RS6_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app1_rs6_sat_q2 = ( (APP1_CPU_LOADS <= RS6_CPU_LOADS) ? true:false);

//to check the satisfaction of CPU Speeds
formula app1_rs6_sat_q3 = ( (APP1_CPU_SPEED <= RS6_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app1_rs6_sat_ml_all = ( (app1_rs6_sat_q1=true) & 
				(app1_rs6_sat_q2=true) & 
				(app1_rs6_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs6_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs6_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app1_rs6_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs6_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs6_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs6_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs6_sat_ml_all : true)))));


//=================================
//QoS CONSTRAINTS CHECKING FOR APP1 WITH RS7=======

//to check the satisfaction of CPU Cores
formula app1_rs7_sat_q1 = ( (APP1_CPU_CORES <= RS7_CPU_CORES) ? true:false);

//to check the satisfaction of CPU Loads
formula app1_rs7_sat_q2 = ( (APP1_CPU_LOADS <= RS7_CPU_LOADS) ? true:false);

//to check the satisfaction of CPU Speeds
formula app1_rs7_sat_q3 = ( (APP1_CPU_SPEED <= RS7_CPU_SPEED) ? true:false);

//to check the satisfaction of overall quality for each node
formula app1_rs7_sat_ml_all = ( (app1_rs7_sat_q1=true) & 
				(app1_rs7_sat_q2=true) & 
				(app1_rs7_sat_q3=true) ? true:false);

//to check the satisfaction of overall quality based on utility
//true if only the utility
formula app1_rs7_sat_ut_all = ( app1_uv_all <= MAXUT ? true:false);

//to check the constraint satisfaction of the selected QoS attribute
//sat either get the reasoned boolean value, otherwise, it takes false
formula app1_rs7_sat = 
		( GOAL_TY = GOAL_TY_Q1 ? app1_rs7_sat_q1 :
              	( GOAL_TY = GOAL_TY_Q2 ? app1_rs7_sat_q2 :
              	( GOAL_TY = GOAL_TY_Q3 ? app1_rs7_sat_q3 :
              	( GOAL_TY = GOAL_TY_UT ? app1_rs7_sat_ut_all :
              	( GOAL_TY = GOAL_TY_ML ? app1_rs7_sat_ml_all : true)))));



//==============================================
//REWARD STRUCTURE

formula rwd_app0_cpu_speed = APP0_CPU_SPEED;
formula rwd_app0_cpu_loads = APP0_CPU_LOADS;

formula rwd_app1_cpu_speed = APP1_CPU_SPEED;
formula rwd_app1_cpu_loads = APP1_CPU_LOADS;


//time dimension: CPU speed
rewards "c1_rt"
//[enda] true : rwd_app0_cpu_speed;
goala = true : rwd_app0_cpu_speed;
endrewards

rewards "c2_rt"
//[endb] true : rwd_app1_cpu_speed;
goalb = true : rwd_app1_cpu_speed;
endrewards

//rewards "rt"
//[enda] true : rwd_app0_cpu_speed;
//[endb] true : rwd_app1_cpu_speed;
//endrewards

//resource dimension: CPU loads
rewards "c1_ru"
//[enda] true : rwd_app0_cpu_loads;
goala = true : rwd_app0_cpu_loads;
endrewards

rewards "c2_ru"
//[endb] true : rwd_app1_cpu_loads;
goalb = true : rwd_app1_cpu_loads;
endrewards

//rewards "ru"
//[enda] true : rwd_app0_cpu_loads;
//[endb] true : rwd_app1_cpu_loads;
//endrewards

//label "done1" = ta = 2;
//label "done2" = tb = 2;
