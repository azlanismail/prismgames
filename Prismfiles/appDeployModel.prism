smg
//=========Player definition=======
player p1
planner,[r0],[r1],[r2],[r3],[r4],[end]
endplayer

player p2
environment,[n0rs0],[n0rs1],[n1rs0],[n1rs1],[n2rs0],[n2rs1],[n3rs0],[n3rs1],[n4rs0],[n4rs1]
endplayer

//=========Resource Profiles=======
const int MXN=5;
const double app_rs=0.4140136104894433;
const double mx_rs=1.0; //set the max resource per slot

const int n0rs0_id = 0;
const double n0rs0_cost = 64.0;	//cost
const double n0rs0_avail = 0.9005382439711553;	//avail
const double n0rs0_rel = 0.9622437393283833;		//rel
const int n0rs0_time = 558;		//time
const double n0rs0_res = 0.3232077011242489;		//time

const int n0rs1_id = 0;
const double n0rs1_cost = 81.0;	//cost
const double n0rs1_avail = 0.9649879873264663;	//avail
const double n0rs1_rel = 0.9306290410687083;		//rel
const int n0rs1_time = 544;		//time
const double n0rs1_res = 0.25770239796691297;		//time

const int n1rs0_id = 1;
const double n1rs0_cost = 56.0;	//cost
const double n1rs0_avail = 0.8124772760417236;	//avail
const double n1rs0_rel = 0.8697729441941968;		//rel
const int n1rs0_time = 501;		//time
const double n1rs0_res = 0.4999624694965443;		//time

const int n1rs1_id = 1;
const double n1rs1_cost = 83.0;	//cost
const double n1rs1_avail = 0.8912526299305483;	//avail
const double n1rs1_rel = 0.9743965657234276;		//rel
const int n1rs1_time = 563;		//time
const double n1rs1_res = 0.3046951011315927;		//time

const int n2rs0_id = 2;
const double n2rs0_cost = 71.0;	//cost
const double n2rs0_avail = 0.9696221327567157;	//avail
const double n2rs0_rel = 0.8757366581602978;		//rel
const int n2rs0_time = 527;		//time
const double n2rs0_res = 0.48525938070137387;		//time

const int n2rs1_id = 2;
const double n2rs1_cost = 51.0;	//cost
const double n2rs1_avail = 0.8673233663154631;	//avail
const double n2rs1_rel = 0.8393857325681893;		//rel
const int n2rs1_time = 557;		//time
const double n2rs1_res = 0.37959435418160803;		//time

const int n3rs0_id = 3;
const double n3rs0_cost = 85.0;	//cost
const double n3rs0_avail = 0.9870921167641327;	//avail
const double n3rs0_rel = 0.8841078218321363;		//rel
const int n3rs0_time = 568;		//time
const double n3rs0_res = 0.28664458646571106;		//time

const int n3rs1_id = 3;
const double n3rs1_cost = 58.0;	//cost
const double n3rs1_avail = 0.8405054825946097;	//avail
const double n3rs1_rel = 0.9996390033642332;		//rel
const int n3rs1_time = 563;		//time
const double n3rs1_res = 0.18496536080327572;		//time

const int n4rs0_id = 4;
const double n4rs0_cost = 83.0;	//cost
const double n4rs0_avail = 0.9397118206112927;	//avail
const double n4rs0_rel = 0.8174582211700046;		//rel
const int n4rs0_time = 501;		//time
const double n4rs0_res = 0.22839277358722568;		//time

const int n4rs1_id = 4;
const double n4rs1_cost = 60.0;	//cost
const double n4rs1_avail = 0.8354491875950314;	//avail
const double n4rs1_rel = 0.8457405430377164;		//rel
const int n4rs1_time = 570;		//time
const double n4rs1_res = 0.1593670701347616;		//time


//=========Global Parameters=======
global t:[0..1] init 0;	//to control the turn
global goal : bool init false;	//(absorbing state)
global n:[-1..MXN] init -1;  //number of computing node

//=========Module for Player 1=======
module planner
//P1's coordinator :
[end] (t=0) & (goal=true) -> true; //to end the selection
//P1 moves :
[r0] (t=0) & (goal=false) -> (n'=0) & (t'=1);
[r1] (t=0) & (goal=false) -> (n'=1) & (t'=1);
[r2] (t=0) & (goal=false) -> (n'=2) & (t'=1);
[r3] (t=0) & (goal=false) -> (n'=3) & (t'=1);
[r4] (t=0) & (goal=false) -> (n'=4) & (t'=1);
endmodule

//=========Module for Player 2=======
module environment
//P2 moves for single or sequential pattern:
[n0rs0] (t=1) & (n=0) & (app_rs + n0rs0_res <= mx_rs) -> n0rs0_rel:(goal'=true) & (t'=0) + 1-n0rs0_rel:(goal'=false) & (t'=0);
[n0rs1] (t=1) & (n=0) & (app_rs + n0rs1_res <= mx_rs) -> n0rs1_rel:(goal'=true) & (t'=0) + 1-n0rs1_rel:(goal'=false) & (t'=0);

[n1rs0] (t=1) & (n=1) & (app_rs + n1rs0_res <= mx_rs) -> n1rs0_rel:(goal'=true) & (t'=0) + 1-n1rs0_rel:(goal'=false) & (t'=0);
[n1rs1] (t=1) & (n=1) & (app_rs + n1rs1_res <= mx_rs) -> n1rs1_rel:(goal'=true) & (t'=0) + 1-n1rs1_rel:(goal'=false) & (t'=0);

[n2rs0] (t=1) & (n=2) & (app_rs + n2rs0_res <= mx_rs) -> n2rs0_rel:(goal'=true) & (t'=0) + 1-n2rs0_rel:(goal'=false) & (t'=0);
[n2rs1] (t=1) & (n=2) & (app_rs + n2rs1_res <= mx_rs) -> n2rs1_rel:(goal'=true) & (t'=0) + 1-n2rs1_rel:(goal'=false) & (t'=0);

[n3rs0] (t=1) & (n=3) & (app_rs + n3rs0_res <= mx_rs) -> n3rs0_rel:(goal'=true) & (t'=0) + 1-n3rs0_rel:(goal'=false) & (t'=0);
[n3rs1] (t=1) & (n=3) & (app_rs + n3rs1_res <= mx_rs) -> n3rs1_rel:(goal'=true) & (t'=0) + 1-n3rs1_rel:(goal'=false) & (t'=0);

[n4rs0] (t=1) & (n=4) & (app_rs + n4rs0_res <= mx_rs) -> n4rs0_rel:(goal'=true) & (t'=0) + 1-n4rs0_rel:(goal'=false) & (t'=0);
[n4rs1] (t=1) & (n=4) & (app_rs + n4rs1_res <= mx_rs) -> n4rs1_rel:(goal'=true) & (t'=0) + 1-n4rs1_rel:(goal'=false) & (t'=0);

endmodule

//=========Reward Structure=======
rewards "rw_cost"
[n0rs0] true : n0rs0_cost;
[n0rs1] true : n0rs1_cost;
[n1rs0] true : n1rs0_cost;
[n1rs1] true : n1rs1_cost;
[n2rs0] true : n2rs0_cost;
[n2rs1] true : n2rs1_cost;
[n3rs0] true : n3rs0_cost;
[n3rs1] true : n3rs1_cost;
[n4rs0] true : n4rs0_cost;
[n4rs1] true : n4rs1_cost;
endrewards
rewards "rw_time"
[n0rs0] true : n0rs0_time;
[n0rs1] true : n0rs1_time;
[n1rs0] true : n1rs0_time;
[n1rs1] true : n1rs1_time;
[n2rs0] true : n2rs0_time;
[n2rs1] true : n2rs1_time;
[n3rs0] true : n3rs0_time;
[n3rs1] true : n3rs1_time;
[n4rs0] true : n4rs0_time;
[n4rs1] true : n4rs1_time;
endrewards
rewards "rw_reliability"
[n0rs0] true : n0rs0_rel;
[n0rs1] true : n0rs1_rel;
[n1rs0] true : n1rs0_rel;
[n1rs1] true : n1rs1_rel;
[n2rs0] true : n2rs0_rel;
[n2rs1] true : n2rs1_rel;
[n3rs0] true : n3rs0_rel;
[n3rs1] true : n3rs1_rel;
[n4rs0] true : n4rs0_rel;
[n4rs1] true : n4rs1_rel;
endrewards
rewards "rw_availability"
[n0rs0] true : n0rs0_avail;
[n0rs1] true : n0rs1_avail;
[n1rs0] true : n1rs0_avail;
[n1rs1] true : n1rs1_avail;
[n2rs0] true : n2rs0_avail;
[n2rs1] true : n2rs1_avail;
[n3rs0] true : n3rs0_avail;
[n3rs1] true : n3rs1_avail;
[n4rs0] true : n4rs0_avail;
[n4rs1] true : n4rs1_avail;
endrewards
//=========Labels=======
label "done" = (goal=true);
